
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e54  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000f84  08000f84  00010f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f94  08000f94  00010f9c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f94  08000f94  00010f9c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f94  08000f9c  00010f9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f94  08000f94  00010f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f98  08000f98  00010f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000000  08000f9c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08000f9c  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f9c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e32  00000000  00000000  00010fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010c0  00000000  00000000  00017df7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000127e  00000000  00000000  00018eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002d8  00000000  00000000  0001a138  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000250  00000000  00000000  0001a410  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000035f2  00000000  00000000  0001a660  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003a4e  00000000  00000000  0001dc52  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000ca0d  00000000  00000000  000216a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002e0ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000964  00000000  00000000  0002e128  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f6c 	.word	0x08000f6c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f6c 	.word	0x08000f6c

08000170 <eeprom_init>:
 */

#include "I2C_Slave_EEROM.h"

void eeprom_init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0
	I2C_InintTypeDef I2C1CFG;

	I2C1CFG.General_Call_Address_Detection = I2C_ENGC_Enable;
 8000176:	2340      	movs	r3, #64	; 0x40
 8000178:	61bb      	str	r3, [r7, #24]
	I2C1CFG.ACK_Control = I2C_ACK_Enable;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	617b      	str	r3, [r7, #20]
	I2C1CFG.ClockSpeed = I2C_SCLK_SM_100K;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <eeprom_init+0x38>)
 8000182:	603b      	str	r3, [r7, #0]
	I2C1CFG.Mode = I2C_Mode_I2C;
 8000184:	2300      	movs	r3, #0
 8000186:	60bb      	str	r3, [r7, #8]
	I2C1CFG.P_Slave_Event_CallBack = NULL;
 8000188:	2300      	movs	r3, #0
 800018a:	61fb      	str	r3, [r7, #28]
	I2C1CFG.StretchMode = I2C_StretchMode_Enable;
 800018c:	2300      	movs	r3, #0
 800018e:	607b      	str	r3, [r7, #4]

	MCAL_I2C_Init(I2C1, &I2C1CFG);
 8000190:	463b      	mov	r3, r7
 8000192:	4619      	mov	r1, r3
 8000194:	4805      	ldr	r0, [pc, #20]	; (80001ac <eeprom_init+0x3c>)
 8000196:	f000 fbfb 	bl	8000990 <MCAL_I2C_Init>
	MCAL_I2C_GPIO_Set_Pins(I2C1);
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <eeprom_init+0x3c>)
 800019c:	f000 fd0a 	bl	8000bb4 <MCAL_I2C_GPIO_Set_Pins>
}
 80001a0:	bf00      	nop
 80001a2:	3720      	adds	r7, #32
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <eeprom_write_Nbytes>:


unsigned char eeprom_write_Nbytes(unsigned int Memory_address, unsigned char* bytes, uint8_t Data_Length)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c8      	sub	sp, #288	; 0x120
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f107 030c 	add.w	r3, r7, #12
 80001ba:	6018      	str	r0, [r3, #0]
 80001bc:	f107 0308 	add.w	r3, r7, #8
 80001c0:	6019      	str	r1, [r3, #0]
 80001c2:	1dfb      	adds	r3, r7, #7
 80001c4:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint8_t buffer[256];
	buffer[0] = (uint8_t) (Memory_address >> 8); // Upper byte Memory Address
 80001cc:	f107 030c 	add.w	r3, r7, #12
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	0a1b      	lsrs	r3, r3, #8
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	f107 0314 	add.w	r3, r7, #20
 80001da:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t) Memory_address; // Lower byte Memory Address
 80001dc:	f107 030c 	add.w	r3, r7, #12
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	705a      	strb	r2, [r3, #1]
	for (i = 2; i < (Data_Length + 2); ++i)
 80001ea:	2302      	movs	r3, #2
 80001ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80001f0:	e011      	b.n	8000216 <eeprom_write_Nbytes+0x66>
	{
		buffer[i] = bytes[i-2];
 80001f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80001f6:	3b02      	subs	r3, #2
 80001f8:	f107 0208 	add.w	r2, r7, #8
 80001fc:	6812      	ldr	r2, [r2, #0]
 80001fe:	441a      	add	r2, r3
 8000200:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000204:	7811      	ldrb	r1, [r2, #0]
 8000206:	f107 0214 	add.w	r2, r7, #20
 800020a:	54d1      	strb	r1, [r2, r3]
	for (i = 2; i < (Data_Length + 2); ++i)
 800020c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000210:	3301      	adds	r3, #1
 8000212:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000216:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800021a:	1dfb      	adds	r3, r7, #7
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	3302      	adds	r3, #2
 8000220:	429a      	cmp	r2, r3
 8000222:	dbe6      	blt.n	80001f2 <eeprom_write_Nbytes+0x42>
	}

	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_Address, buffer, (Data_Length + 2), With_Stop, Start);
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	3302      	adds	r3, #2
 800022a:	4619      	mov	r1, r3
 800022c:	f107 0214 	add.w	r2, r7, #20
 8000230:	2300      	movs	r3, #0
 8000232:	9301      	str	r3, [sp, #4]
 8000234:	2300      	movs	r3, #0
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	460b      	mov	r3, r1
 800023a:	212a      	movs	r1, #42	; 0x2a
 800023c:	4804      	ldr	r0, [pc, #16]	; (8000250 <eeprom_write_Nbytes+0xa0>)
 800023e:	f000 fd03 	bl	8000c48 <MCAL_I2C_Master_TX>
	return 0;
 8000242:	2300      	movs	r3, #0
}
 8000244:	4618      	mov	r0, r3
 8000246:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40005400 	.word	0x40005400

08000254 <eeprom_read_byte>:

unsigned char eeprom_read_byte(unsigned int address, unsigned char* dataOut, uint8_t dataLen)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af02      	add	r7, sp, #8
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	4613      	mov	r3, r2
 8000260:	71fb      	strb	r3, [r7, #7]
	unsigned char buffer[2];
	buffer[0] = (uint8_t) (address >> 8); // Upper byte Memory Address
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	0a1b      	lsrs	r3, r3, #8
 8000266:	b2db      	uxtb	r3, r3
 8000268:	753b      	strb	r3, [r7, #20]
	buffer[1] = (uint8_t) address; // Lower byte Memory Address
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	757b      	strb	r3, [r7, #21]
	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_Address, buffer, 2, Without_Stop, Start); // write address only
 8000270:	f107 0214 	add.w	r2, r7, #20
 8000274:	2300      	movs	r3, #0
 8000276:	9301      	str	r3, [sp, #4]
 8000278:	2301      	movs	r3, #1
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2302      	movs	r3, #2
 800027e:	212a      	movs	r1, #42	; 0x2a
 8000280:	4809      	ldr	r0, [pc, #36]	; (80002a8 <eeprom_read_byte+0x54>)
 8000282:	f000 fce1 	bl	8000c48 <MCAL_I2C_Master_TX>
	MCAL_I2C_Master_RX(I2C1, EEPROM_Slave_Address, dataOut, dataLen, With_Stop, repeated_start);
 8000286:	79fa      	ldrb	r2, [r7, #7]
 8000288:	2301      	movs	r3, #1
 800028a:	9301      	str	r3, [sp, #4]
 800028c:	2300      	movs	r3, #0
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	4613      	mov	r3, r2
 8000292:	68ba      	ldr	r2, [r7, #8]
 8000294:	212a      	movs	r1, #42	; 0x2a
 8000296:	4804      	ldr	r0, [pc, #16]	; (80002a8 <eeprom_read_byte+0x54>)
 8000298:	f000 fd2c 	bl	8000cf4 <MCAL_I2C_Master_RX>
	return 0;
 800029c:	2300      	movs	r3, #0
}
 800029e:	4618      	mov	r0, r3
 80002a0:	3718      	adds	r7, #24
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40005400 	.word	0x40005400

080002ac <clock_init>:
#include "I2C_Slave_EEROM.h"

unsigned char ch;

void clock_init()
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
	//Clock Enable
	RCC_GPIOA_CLK_EN();
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <clock_init+0x30>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a09      	ldr	r2, [pc, #36]	; (80002dc <clock_init+0x30>)
 80002b6:	f043 0304 	orr.w	r3, r3, #4
 80002ba:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <clock_init+0x30>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a06      	ldr	r2, [pc, #24]	; (80002dc <clock_init+0x30>)
 80002c2:	f043 0308 	orr.w	r3, r3, #8
 80002c6:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80002c8:	4b04      	ldr	r3, [pc, #16]	; (80002dc <clock_init+0x30>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a03      	ldr	r2, [pc, #12]	; (80002dc <clock_init+0x30>)
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6193      	str	r3, [r2, #24]
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	40021000 	.word	0x40021000

080002e0 <main>:
}



int main()
{ 
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
	clock_init();
 80002e6:	f7ff ffe1 	bl	80002ac <clock_init>
//
//	MCAL_SPI_Init(SPI1, &SPI1CFG);
//	MCAL_SPI_GPIO_Set_Pins(SPI1);

	//Test 1
	unsigned char ch1 [] = {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7};
 80002ea:	4a1b      	ldr	r2, [pc, #108]	; (8000358 <main+0x78>)
 80002ec:	f107 0308 	add.w	r3, r7, #8
 80002f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002f4:	6018      	str	r0, [r3, #0]
 80002f6:	3304      	adds	r3, #4
 80002f8:	8019      	strh	r1, [r3, #0]
 80002fa:	3302      	adds	r3, #2
 80002fc:	0c0a      	lsrs	r2, r1, #16
 80002fe:	701a      	strb	r2, [r3, #0]
	unsigned char ch2[7] = {0};
 8000300:	463b      	mov	r3, r7
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	f8c3 2003 	str.w	r2, [r3, #3]

	eeprom_init();
 800030a:	f7ff ff31 	bl	8000170 <eeprom_init>
	eeprom_write_Nbytes(0xAF, ch1, 7);
 800030e:	f107 0308 	add.w	r3, r7, #8
 8000312:	2207      	movs	r2, #7
 8000314:	4619      	mov	r1, r3
 8000316:	20af      	movs	r0, #175	; 0xaf
 8000318:	f7ff ff4a 	bl	80001b0 <eeprom_write_Nbytes>
	eeprom_read_byte(0xAF, ch2, 7);
 800031c:	463b      	mov	r3, r7
 800031e:	2207      	movs	r2, #7
 8000320:	4619      	mov	r1, r3
 8000322:	20af      	movs	r0, #175	; 0xaf
 8000324:	f7ff ff96 	bl	8000254 <eeprom_read_byte>

	//Test 2
	ch1[0] = 0xA;
 8000328:	230a      	movs	r3, #10
 800032a:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB;
 800032c:	230b      	movs	r3, #11
 800032e:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 8000330:	230c      	movs	r3, #12
 8000332:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD;
 8000334:	230d      	movs	r3, #13
 8000336:	72fb      	strb	r3, [r7, #11]

	eeprom_write_Nbytes(0xFFF, ch1, 4);
 8000338:	f107 0308 	add.w	r3, r7, #8
 800033c:	2204      	movs	r2, #4
 800033e:	4619      	mov	r1, r3
 8000340:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000344:	f7ff ff34 	bl	80001b0 <eeprom_write_Nbytes>
	eeprom_read_byte(0xFFF, ch2, 4);
 8000348:	463b      	mov	r3, r7
 800034a:	2204      	movs	r2, #4
 800034c:	4619      	mov	r1, r3
 800034e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000352:	f7ff ff7f 	bl	8000254 <eeprom_read_byte>

	while (1){
 8000356:	e7fe      	b.n	8000356 <main+0x76>
 8000358:	08000f84 	.word	0x08000f84

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000360:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000364:	480c      	ldr	r0, [pc, #48]	; (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000366:	490d      	ldr	r1, [pc, #52]	; (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <LoopForever+0xe>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800037c:	4c0a      	ldr	r4, [pc, #40]	; (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038a:	f000 fdcb 	bl	8000f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ffa7 	bl	80002e0 <main>

08000392 <LoopForever>:

LoopForever:
    b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a0:	08000f9c 	.word	0x08000f9c
  ldr r2, =_sbss
 80003a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a8:	200000ac 	.word	0x200000ac

080003ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC1_2_IRQHandler>
	...

080003b0 <EXTI0_IRQHandler>:

//=================================================================
//ISR Functions:
//=================================================================
void EXTI0_IRQHandler()
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	//Cleared by writing a '1' into the bit -Pending register (EXTI_PR)
	EXTI->PR |= 1 << 0;
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <EXTI0_IRQHandler+0x1c>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	4a04      	ldr	r2, [pc, #16]	; (80003cc <EXTI0_IRQHandler+0x1c>)
 80003ba:	f043 0301 	orr.w	r3, r3, #1
 80003be:	6153      	str	r3, [r2, #20]
	//Callback
	GP_IRQ_CallBack[0]();
 80003c0:	4b03      	ldr	r3, [pc, #12]	; (80003d0 <EXTI0_IRQHandler+0x20>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4798      	blx	r3

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40010400 	.word	0x40010400
 80003d0:	20000070 	.word	0x20000070

080003d4 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler()
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	EXTI->PR |= 1 << 1;
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <EXTI1_IRQHandler+0x1c>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <EXTI1_IRQHandler+0x1c>)
 80003de:	f043 0302 	orr.w	r3, r3, #2
 80003e2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 80003e4:	4b03      	ldr	r3, [pc, #12]	; (80003f4 <EXTI1_IRQHandler+0x20>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	4798      	blx	r3
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40010400 	.word	0x40010400
 80003f4:	20000070 	.word	0x20000070

080003f8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler()
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	EXTI->PR |= 1 << 2;
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <EXTI2_IRQHandler+0x1c>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	4a04      	ldr	r2, [pc, #16]	; (8000414 <EXTI2_IRQHandler+0x1c>)
 8000402:	f043 0304 	orr.w	r3, r3, #4
 8000406:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000408:	4b03      	ldr	r3, [pc, #12]	; (8000418 <EXTI2_IRQHandler+0x20>)
 800040a:	689b      	ldr	r3, [r3, #8]
 800040c:	4798      	blx	r3
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40010400 	.word	0x40010400
 8000418:	20000070 	.word	0x20000070

0800041c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler()
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1 << 3;
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <EXTI3_IRQHandler+0x1c>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <EXTI3_IRQHandler+0x1c>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 800042c:	4b03      	ldr	r3, [pc, #12]	; (800043c <EXTI3_IRQHandler+0x20>)
 800042e:	68db      	ldr	r3, [r3, #12]
 8000430:	4798      	blx	r3
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40010400 	.word	0x40010400
 800043c:	20000070 	.word	0x20000070

08000440 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler()
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	EXTI->PR |= 1 << 4;
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <EXTI4_IRQHandler+0x1c>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <EXTI4_IRQHandler+0x1c>)
 800044a:	f043 0310 	orr.w	r3, r3, #16
 800044e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000450:	4b03      	ldr	r3, [pc, #12]	; (8000460 <EXTI4_IRQHandler+0x20>)
 8000452:	691b      	ldr	r3, [r3, #16]
 8000454:	4798      	blx	r3
}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40010400 	.word	0x40010400
 8000460:	20000070 	.word	0x20000070

08000464 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler()
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 5) { EXTI->PR |= (1<<5); 	GP_IRQ_CallBack[5](); }
 8000468:	4b26      	ldr	r3, [pc, #152]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	f003 0320 	and.w	r3, r3, #32
 8000470:	2b00      	cmp	r3, #0
 8000472:	d008      	beq.n	8000486 <EXTI9_5_IRQHandler+0x22>
 8000474:	4b23      	ldr	r3, [pc, #140]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 8000476:	695b      	ldr	r3, [r3, #20]
 8000478:	4a22      	ldr	r2, [pc, #136]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 800047a:	f043 0320 	orr.w	r3, r3, #32
 800047e:	6153      	str	r3, [r2, #20]
 8000480:	4b21      	ldr	r3, [pc, #132]	; (8000508 <EXTI9_5_IRQHandler+0xa4>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	4798      	blx	r3
	if(EXTI->PR & 1 << 6) { EXTI->PR |= (1<<6); 	GP_IRQ_CallBack[6](); }
 8000486:	4b1f      	ldr	r3, [pc, #124]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800048e:	2b00      	cmp	r3, #0
 8000490:	d008      	beq.n	80004a4 <EXTI9_5_IRQHandler+0x40>
 8000492:	4b1c      	ldr	r3, [pc, #112]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a1b      	ldr	r2, [pc, #108]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 8000498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800049c:	6153      	str	r3, [r2, #20]
 800049e:	4b1a      	ldr	r3, [pc, #104]	; (8000508 <EXTI9_5_IRQHandler+0xa4>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4798      	blx	r3
	if(EXTI->PR & 1 << 7) { EXTI->PR |= (1<<7); 	GP_IRQ_CallBack[7](); }
 80004a4:	4b17      	ldr	r3, [pc, #92]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d008      	beq.n	80004c2 <EXTI9_5_IRQHandler+0x5e>
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	4a13      	ldr	r2, [pc, #76]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ba:	6153      	str	r3, [r2, #20]
 80004bc:	4b12      	ldr	r3, [pc, #72]	; (8000508 <EXTI9_5_IRQHandler+0xa4>)
 80004be:	69db      	ldr	r3, [r3, #28]
 80004c0:	4798      	blx	r3
	if(EXTI->PR & 1 << 8) { EXTI->PR |= (1<<8); 	GP_IRQ_CallBack[8](); }
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d008      	beq.n	80004e0 <EXTI9_5_IRQHandler+0x7c>
 80004ce:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a0c      	ldr	r2, [pc, #48]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004d8:	6153      	str	r3, [r2, #20]
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <EXTI9_5_IRQHandler+0xa4>)
 80004dc:	6a1b      	ldr	r3, [r3, #32]
 80004de:	4798      	blx	r3
	if(EXTI->PR & 1 << 9) { EXTI->PR |= (1<<9); 	GP_IRQ_CallBack[9](); }
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d008      	beq.n	80004fe <EXTI9_5_IRQHandler+0x9a>
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004ee:	695b      	ldr	r3, [r3, #20]
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f6:	6153      	str	r3, [r2, #20]
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <EXTI9_5_IRQHandler+0xa4>)
 80004fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004fc:	4798      	blx	r3

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40010400 	.word	0x40010400
 8000508:	20000070 	.word	0x20000070

0800050c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler()
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 10) { EXTI->PR |= (1<<10); 	GP_IRQ_CallBack[10](); }
 8000510:	4b2d      	ldr	r3, [pc, #180]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 8000512:	695b      	ldr	r3, [r3, #20]
 8000514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000518:	2b00      	cmp	r3, #0
 800051a:	d008      	beq.n	800052e <EXTI15_10_IRQHandler+0x22>
 800051c:	4b2a      	ldr	r3, [pc, #168]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	4a29      	ldr	r2, [pc, #164]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 8000522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000526:	6153      	str	r3, [r2, #20]
 8000528:	4b28      	ldr	r3, [pc, #160]	; (80005cc <EXTI15_10_IRQHandler+0xc0>)
 800052a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800052c:	4798      	blx	r3
	if(EXTI->PR & 1 << 11) { EXTI->PR |= (1<<11); 	GP_IRQ_CallBack[11](); }
 800052e:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000536:	2b00      	cmp	r3, #0
 8000538:	d008      	beq.n	800054c <EXTI15_10_IRQHandler+0x40>
 800053a:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a22      	ldr	r2, [pc, #136]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 8000540:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b21      	ldr	r3, [pc, #132]	; (80005cc <EXTI15_10_IRQHandler+0xc0>)
 8000548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800054a:	4798      	blx	r3
	if(EXTI->PR & 1 << 12) { EXTI->PR |= (1<<12); 	GP_IRQ_CallBack[12](); }
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000554:	2b00      	cmp	r3, #0
 8000556:	d008      	beq.n	800056a <EXTI15_10_IRQHandler+0x5e>
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800055a:	695b      	ldr	r3, [r3, #20]
 800055c:	4a1a      	ldr	r2, [pc, #104]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800055e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000562:	6153      	str	r3, [r2, #20]
 8000564:	4b19      	ldr	r3, [pc, #100]	; (80005cc <EXTI15_10_IRQHandler+0xc0>)
 8000566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000568:	4798      	blx	r3
	if(EXTI->PR & 1 << 13) { EXTI->PR |= (1<<13); 	GP_IRQ_CallBack[13](); }
 800056a:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000572:	2b00      	cmp	r3, #0
 8000574:	d008      	beq.n	8000588 <EXTI15_10_IRQHandler+0x7c>
 8000576:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a13      	ldr	r2, [pc, #76]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800057c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000580:	6153      	str	r3, [r2, #20]
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <EXTI15_10_IRQHandler+0xc0>)
 8000584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000586:	4798      	blx	r3
	if(EXTI->PR & 1 << 14) { EXTI->PR |= (1<<14); 	GP_IRQ_CallBack[14](); }
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000590:	2b00      	cmp	r3, #0
 8000592:	d008      	beq.n	80005a6 <EXTI15_10_IRQHandler+0x9a>
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800059a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059e:	6153      	str	r3, [r2, #20]
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <EXTI15_10_IRQHandler+0xc0>)
 80005a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005a4:	4798      	blx	r3
	if(EXTI->PR & 1 << 15) { EXTI->PR |= (1<<15); 	GP_IRQ_CallBack[15](); }
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d008      	beq.n	80005c4 <EXTI15_10_IRQHandler+0xb8>
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 80005b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005bc:	6153      	str	r3, [r2, #20]
 80005be:	4b03      	ldr	r3, [pc, #12]	; (80005cc <EXTI15_10_IRQHandler+0xc0>)
 80005c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005c2:	4798      	blx	r3
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40010400 	.word	0x40010400
 80005cc:	20000070 	.word	0x20000070

080005d0 <Get_CRLH_Position>:
 *      Author: Antrawy
 */
#include "Stm32F103C6_GPIO_Driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber){
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	2b80      	cmp	r3, #128	; 0x80
 80005de:	d042      	beq.n	8000666 <Get_CRLH_Position+0x96>
 80005e0:	2b80      	cmp	r3, #128	; 0x80
 80005e2:	dc11      	bgt.n	8000608 <Get_CRLH_Position+0x38>
 80005e4:	2b08      	cmp	r3, #8
 80005e6:	d036      	beq.n	8000656 <Get_CRLH_Position+0x86>
 80005e8:	2b08      	cmp	r3, #8
 80005ea:	dc06      	bgt.n	80005fa <Get_CRLH_Position+0x2a>
 80005ec:	2b02      	cmp	r3, #2
 80005ee:	d02e      	beq.n	800064e <Get_CRLH_Position+0x7e>
 80005f0:	2b04      	cmp	r3, #4
 80005f2:	d02e      	beq.n	8000652 <Get_CRLH_Position+0x82>
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d028      	beq.n	800064a <Get_CRLH_Position+0x7a>
 80005f8:	e047      	b.n	800068a <Get_CRLH_Position+0xba>
 80005fa:	2b20      	cmp	r3, #32
 80005fc:	d02f      	beq.n	800065e <Get_CRLH_Position+0x8e>
 80005fe:	2b40      	cmp	r3, #64	; 0x40
 8000600:	d02f      	beq.n	8000662 <Get_CRLH_Position+0x92>
 8000602:	2b10      	cmp	r3, #16
 8000604:	d029      	beq.n	800065a <Get_CRLH_Position+0x8a>
 8000606:	e040      	b.n	800068a <Get_CRLH_Position+0xba>
 8000608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800060c:	d033      	beq.n	8000676 <Get_CRLH_Position+0xa6>
 800060e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000612:	dc09      	bgt.n	8000628 <Get_CRLH_Position+0x58>
 8000614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000618:	d029      	beq.n	800066e <Get_CRLH_Position+0x9e>
 800061a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800061e:	d028      	beq.n	8000672 <Get_CRLH_Position+0xa2>
 8000620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000624:	d021      	beq.n	800066a <Get_CRLH_Position+0x9a>
 8000626:	e030      	b.n	800068a <Get_CRLH_Position+0xba>
 8000628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800062c:	d027      	beq.n	800067e <Get_CRLH_Position+0xae>
 800062e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000632:	dc03      	bgt.n	800063c <Get_CRLH_Position+0x6c>
 8000634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000638:	d01f      	beq.n	800067a <Get_CRLH_Position+0xaa>
 800063a:	e026      	b.n	800068a <Get_CRLH_Position+0xba>
 800063c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000640:	d01f      	beq.n	8000682 <Get_CRLH_Position+0xb2>
 8000642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000646:	d01e      	beq.n	8000686 <Get_CRLH_Position+0xb6>
 8000648:	e01f      	b.n	800068a <Get_CRLH_Position+0xba>
	case GPIO_PIN_0:
		return 0;
 800064a:	2300      	movs	r3, #0
 800064c:	e01e      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 800064e:	2304      	movs	r3, #4
 8000650:	e01c      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000652:	2308      	movs	r3, #8
 8000654:	e01a      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000656:	230c      	movs	r3, #12
 8000658:	e018      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 800065a:	2310      	movs	r3, #16
 800065c:	e016      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 800065e:	2314      	movs	r3, #20
 8000660:	e014      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000662:	2318      	movs	r3, #24
 8000664:	e012      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000666:	231c      	movs	r3, #28
 8000668:	e010      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 800066a:	2300      	movs	r3, #0
 800066c:	e00e      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 800066e:	2304      	movs	r3, #4
 8000670:	e00c      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000672:	2308      	movs	r3, #8
 8000674:	e00a      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000676:	230c      	movs	r3, #12
 8000678:	e008      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 800067a:	2310      	movs	r3, #16
 800067c:	e006      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 800067e:	2314      	movs	r3, #20
 8000680:	e004      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000682:	2318      	movs	r3, #24
 8000684:	e002      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000686:	231c      	movs	r3, #28
 8000688:	e000      	b.n	800068c <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 800068a:	2300      	movs	r3, #0
}
 800068c:	4618      	mov	r0, r3
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr

08000696 <MCAL_GPIO_Init>:
* @retval 			-None
* Note				-Stm32F103C6 MCU has GPIO A, B, C, D, E Modules
* 					But LQFP48 Package jas only GPIO A, B, PART of C/D exported as external PINs from the Module
*/

void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig){
 8000696:	b590      	push	{r4, r7, lr}
 8000698:	b085      	sub	sp, #20
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
 800069e:	6039      	str	r1, [r7, #0]
	//Port configuration low (GPIO_CRL) Configure PINS from 0 >> 7
	//Port configuration high (GPIO_CRH) Configure PINS from 8 >> 15
	volatile uint32_t *configRegister = NULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	73fb      	strb	r3, [r7, #15]

	configRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH;
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	881b      	ldrh	r3, [r3, #0]
 80006ac:	2bff      	cmp	r3, #255	; 0xff
 80006ae:	d801      	bhi.n	80006b4 <MCAL_GPIO_Init+0x1e>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	e001      	b.n	80006b8 <MCAL_GPIO_Init+0x22>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3304      	adds	r3, #4
 80006b8:	60bb      	str	r3, [r7, #8]

	//Clear CNF[1:0] MODE[1:0]
	(*configRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff86 	bl	80005d0 <Get_CRLH_Position>
 80006c4:	4603      	mov	r3, r0
 80006c6:	461a      	mov	r2, r3
 80006c8:	230f      	movs	r3, #15
 80006ca:	4093      	lsls	r3, r2
 80006cc:	43da      	mvns	r2, r3
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	401a      	ands	r2, r3
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	601a      	str	r2, [r3, #0]

	//If Pin is output
	if ((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)){
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	789b      	ldrb	r3, [r3, #2]
 80006dc:	2b07      	cmp	r3, #7
 80006de:	d00b      	beq.n	80006f8 <MCAL_GPIO_Init+0x62>
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	789b      	ldrb	r3, [r3, #2]
 80006e4:	2b06      	cmp	r3, #6
 80006e6:	d007      	beq.n	80006f8 <MCAL_GPIO_Init+0x62>
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	789b      	ldrb	r3, [r3, #2]
 80006ec:	2b05      	cmp	r3, #5
 80006ee:	d003      	beq.n	80006f8 <MCAL_GPIO_Init+0x62>
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	789b      	ldrb	r3, [r3, #2]
 80006f4:	2b04      	cmp	r3, #4
 80006f6:	d10e      	bne.n	8000716 <MCAL_GPIO_Init+0x80>
		//Set CNF[1:0] MODE[1:0]
		PIN_Config = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F);
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	789b      	ldrb	r3, [r3, #2]
 80006fc:	3b04      	subs	r3, #4
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	b25a      	sxtb	r2, r3
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	78db      	ldrb	r3, [r3, #3]
 8000706:	b25b      	sxtb	r3, r3
 8000708:	4313      	orrs	r3, r2
 800070a:	b25b      	sxtb	r3, r3
 800070c:	b2db      	uxtb	r3, r3
 800070e:	f003 030f 	and.w	r3, r3, #15
 8000712:	73fb      	strb	r3, [r7, #15]
 8000714:	e02c      	b.n	8000770 <MCAL_GPIO_Init+0xda>
	}
	//If Pin is input
	else{
		if ((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG)){
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	789b      	ldrb	r3, [r3, #2]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d003      	beq.n	8000726 <MCAL_GPIO_Init+0x90>
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	789b      	ldrb	r3, [r3, #2]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d107      	bne.n	8000736 <MCAL_GPIO_Init+0xa0>
			PIN_Config = ( ( (PinConfig->GPIO_MODE << 2) | 0x0 ) & 0x0F);
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	789b      	ldrb	r3, [r3, #2]
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	b2db      	uxtb	r3, r3
 800072e:	f003 030f 	and.w	r3, r3, #15
 8000732:	73fb      	strb	r3, [r7, #15]
 8000734:	e01c      	b.n	8000770 <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT){
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	789b      	ldrb	r3, [r3, #2]
 800073a:	2b08      	cmp	r3, #8
 800073c:	d102      	bne.n	8000744 <MCAL_GPIO_Init+0xae>
			PIN_Config = ( ( (GPIO_MODE_INPUT_FLO << 2) | 0x0 ) & 0x0F);
 800073e:	2304      	movs	r3, #4
 8000740:	73fb      	strb	r3, [r7, #15]
 8000742:	e015      	b.n	8000770 <MCAL_GPIO_Init+0xda>
		}
		//PU or PD input
		else{
			PIN_Config = ( ( (GPIO_MODE_INPUT_PU << 2) | 0x0 ) & 0x0F);
 8000744:	2308      	movs	r3, #8
 8000746:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU){
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	789b      	ldrb	r3, [r3, #2]
 800074c:	2b02      	cmp	r3, #2
 800074e:	d107      	bne.n	8000760 <MCAL_GPIO_Init+0xca>
				//Table 20, Port bit configuration table PxODR 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	683a      	ldr	r2, [r7, #0]
 8000756:	8812      	ldrh	r2, [r2, #0]
 8000758:	431a      	orrs	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	e007      	b.n	8000770 <MCAL_GPIO_Init+0xda>
			}else{
				//Table 20, Port bit configuration table PxODR 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	683a      	ldr	r2, [r7, #0]
 8000766:	8812      	ldrh	r2, [r2, #0]
 8000768:	43d2      	mvns	r2, r2
 800076a:	401a      	ands	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*configRegister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000770:	7bfc      	ldrb	r4, [r7, #15]
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ff2a 	bl	80005d0 <Get_CRLH_Position>
 800077c:	4603      	mov	r3, r0
 800077e:	fa04 f203 	lsl.w	r2, r4, r3
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	431a      	orrs	r2, r3
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	601a      	str	r2, [r3, #0]

}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	bd90      	pop	{r4, r7, pc}

08000794 <I2C_AcknowledgeConfig>:
//=================================================================
//						Generic Functions
//=================================================================

void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState state)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	70fb      	strb	r3, [r7, #3]
	if(state == ENABLE)
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d106      	bne.n	80007b4 <I2C_AcknowledgeConfig+0x20>
	{
		I2Cx->CR1 |= I2C_CR1_ACK;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 80007b2:	e005      	b.n	80007c0 <I2C_AcknowledgeConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	601a      	str	r2, [r3, #0]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
	...

080007cc <I2C_GetFlagStatus>:


FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, Status flag)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b089      	sub	sp, #36	; 0x24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
	volatile uint32_t dummyRead;
	FlagStatus bitstatus = RESET;
 80007d6:	2300      	movs	r3, #0
 80007d8:	77fb      	strb	r3, [r7, #31]
	uint32_t flag1 = 0, flag2 = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
	uint32_t lastevent = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]

	switch (flag)
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	2b03      	cmp	r3, #3
 80007ea:	d030      	beq.n	800084e <I2C_GetFlagStatus+0x82>
 80007ec:	2b03      	cmp	r3, #3
 80007ee:	d804      	bhi.n	80007fa <I2C_GetFlagStatus+0x2e>
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d014      	beq.n	800081e <I2C_GetFlagStatus+0x52>
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d81e      	bhi.n	8000836 <I2C_GetFlagStatus+0x6a>
 80007f8:	e005      	b.n	8000806 <I2C_GetFlagStatus+0x3a>
 80007fa:	2b05      	cmp	r3, #5
 80007fc:	d933      	bls.n	8000866 <I2C_GetFlagStatus+0x9a>
 80007fe:	4a32      	ldr	r2, [pc, #200]	; (80008c8 <I2C_GetFlagStatus+0xfc>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d03c      	beq.n	800087e <I2C_GetFlagStatus+0xb2>
 8000804:	e059      	b.n	80008ba <I2C_GetFlagStatus+0xee>
//		1: Communication ongoing on the bus
//		– Set by hardware on detection of SDA or SCL low
//		– cleared by hardware on detection of a Stop condition.
//		It indicates a communication in progress on the bus. This information is still updated when
//		the interface is disabled (PE=0).
		if ((I2Cx->SR2) & (I2C_SR2_BUSY))
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	2b00      	cmp	r3, #0
 8000810:	d002      	beq.n	8000818 <I2C_GetFlagStatus+0x4c>
			bitstatus = SET;
 8000812:	2301      	movs	r3, #1
 8000814:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;
		break;
 8000816:	e050      	b.n	80008ba <I2C_GetFlagStatus+0xee>
			bitstatus = RESET;
 8000818:	2300      	movs	r3, #0
 800081a:	77fb      	strb	r3, [r7, #31]
		break;
 800081c:	e04d      	b.n	80008ba <I2C_GetFlagStatus+0xee>
	}
	case EV5:
	{
		if ((I2Cx->SR1) & (I2C_SR1_SB))
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <I2C_GetFlagStatus+0x64>
			bitstatus = SET;
 800082a:	2301      	movs	r3, #1
 800082c:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;
		break;
 800082e:	e044      	b.n	80008ba <I2C_GetFlagStatus+0xee>
			bitstatus = RESET;
 8000830:	2300      	movs	r3, #0
 8000832:	77fb      	strb	r3, [r7, #31]
		break;
 8000834:	e041      	b.n	80008ba <I2C_GetFlagStatus+0xee>
	}
	case EV6:
	{
		if ((I2Cx->SR1) & (I2C_SR1_ADDR))
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	2b00      	cmp	r3, #0
 8000840:	d002      	beq.n	8000848 <I2C_GetFlagStatus+0x7c>
			bitstatus = SET;
 8000842:	2301      	movs	r3, #1
 8000844:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;
		break;
 8000846:	e038      	b.n	80008ba <I2C_GetFlagStatus+0xee>
			bitstatus = RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	77fb      	strb	r3, [r7, #31]
		break;
 800084c:	e035      	b.n	80008ba <I2C_GetFlagStatus+0xee>
	}
	case EV7:
	{
		if ((I2Cx->SR1) & (I2C_SR1_RXNE))
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000856:	2b00      	cmp	r3, #0
 8000858:	d002      	beq.n	8000860 <I2C_GetFlagStatus+0x94>
			bitstatus = SET;
 800085a:	2301      	movs	r3, #1
 800085c:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;
		break;
 800085e:	e02c      	b.n	80008ba <I2C_GetFlagStatus+0xee>
			bitstatus = RESET;
 8000860:	2300      	movs	r3, #0
 8000862:	77fb      	strb	r3, [r7, #31]
		break;
 8000864:	e029      	b.n	80008ba <I2C_GetFlagStatus+0xee>
	}
	case EV8_1:
	case EV8:
	{
		if ((I2Cx->SR1) & (I2C_SR1_TXE))
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086e:	2b00      	cmp	r3, #0
 8000870:	d002      	beq.n	8000878 <I2C_GetFlagStatus+0xac>
			bitstatus = SET;
 8000872:	2301      	movs	r3, #1
 8000874:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;
		break;
 8000876:	e020      	b.n	80008ba <I2C_GetFlagStatus+0xee>
			bitstatus = RESET;
 8000878:	2300      	movs	r3, #0
 800087a:	77fb      	strb	r3, [r7, #31]
		break;
 800087c:	e01d      	b.n	80008ba <I2C_GetFlagStatus+0xee>
	}
	case MASTER_BYTE_TRANSMITTING:
	{
		flag1 = I2Cx->SR1;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	61bb      	str	r3, [r7, #24]
		flag2 = I2Cx->SR2;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	617b      	str	r3, [r7, #20]
		flag2 = flag2 << 16;
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	041b      	lsls	r3, r3, #16
 800088e:	617b      	str	r3, [r7, #20]
		lastevent = (flag1 | flag2) & ((uint32_t) 0x00FFFFFF);
 8000890:	69ba      	ldr	r2, [r7, #24]
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	4313      	orrs	r3, r2
 8000896:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800089a:	613b      	str	r3, [r7, #16]
		if ((lastevent & flag) == flag)
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	4013      	ands	r3, r2
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d102      	bne.n	80008ae <I2C_GetFlagStatus+0xe2>
			bitstatus = SET;
 80008a8:	2301      	movs	r3, #1
 80008aa:	77fb      	strb	r3, [r7, #31]
 80008ac:	e001      	b.n	80008b2 <I2C_GetFlagStatus+0xe6>
		else
			bitstatus = RESET;
 80008ae:	2300      	movs	r3, #0
 80008b0:	77fb      	strb	r3, [r7, #31]
		dummyRead = I2Cx->SR2;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	60fb      	str	r3, [r7, #12]
		break;
 80008b8:	bf00      	nop
	}
	}

	return bitstatus;
 80008ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3724      	adds	r7, #36	; 0x24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	00070080 	.word	0x00070080

080008cc <I2C_GenerateSTART>:
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState, Repeated_Start start)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	460b      	mov	r3, r1
 80008d6:	70fb      	strb	r3, [r7, #3]
 80008d8:	4613      	mov	r3, r2
 80008da:	70bb      	strb	r3, [r7, #2]
	if(start != repeated_start)
 80008dc:	78bb      	ldrb	r3, [r7, #2]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d007      	beq.n	80008f2 <I2C_GenerateSTART+0x26>
	{
		//Check if the BUS is idle
		while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 80008e2:	bf00      	nop
 80008e4:	2100      	movs	r1, #0
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ff70 	bl	80007cc <I2C_GetFlagStatus>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1f8      	bne.n	80008e4 <I2C_GenerateSTART+0x18>
	}

	if(NewState != DISABLE)
 80008f2:	78fb      	ldrb	r3, [r7, #3]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d006      	beq.n	8000906 <I2C_GenerateSTART+0x3a>
	{
		//Generate Start Condition
		I2Cx->CR1 |= I2C_CR1_START;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	601a      	str	r2, [r3, #0]
	else
	{
		// Disable Start condition generation
		I2Cx->CR1 &= ~(I2C_CR1_START);
	}
}
 8000904:	e005      	b.n	8000912 <I2C_GenerateSTART+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	601a      	str	r2, [r3, #0]
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <I2C_GenerateSTOP>:

void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800091a:	b480      	push	{r7}
 800091c:	b083      	sub	sp, #12
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	460b      	mov	r3, r1
 8000924:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 8000926:	78fb      	ldrb	r3, [r7, #3]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d006      	beq.n	800093a <I2C_GenerateSTOP+0x20>
	{
		//Generate Stop Condition
		I2Cx->CR1 |= I2C_CR1_STOP;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	601a      	str	r2, [r3, #0]
	else
	{
		// Disable Stop condition generation
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 8000938:	e005      	b.n	8000946 <I2C_GenerateSTOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	601a      	str	r2, [r3, #0]
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <I2C_SendAddress>:


// 7 bit mode only
void I2C_SendAddress(I2C_TypeDef* I2Cx, uint16_t Address, I2C_Direction Direction)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	807b      	strh	r3, [r7, #2]
 800095c:	4613      	mov	r3, r2
 800095e:	707b      	strb	r3, [r7, #1]
	Address = (Address << 1);
 8000960:	887b      	ldrh	r3, [r7, #2]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	807b      	strh	r3, [r7, #2]

	if (Direction != I2C_Direction_Transmitter)
 8000966:	787b      	ldrb	r3, [r7, #1]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d004      	beq.n	8000976 <I2C_SendAddress+0x26>
	{
		// Set the address bit0 for read
		Address |= 1<<0;
 800096c:	887b      	ldrh	r3, [r7, #2]
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	807b      	strh	r3, [r7, #2]
 8000974:	e003      	b.n	800097e <I2C_SendAddress+0x2e>
	}
	else
	{
		// Reset the address bit0 for write
		Address &= ~(1<<0);
 8000976:	887b      	ldrh	r3, [r7, #2]
 8000978:	f023 0301 	bic.w	r3, r3, #1
 800097c:	807b      	strh	r3, [r7, #2]
	}
	I2Cx->DR = Address;
 800097e:	887a      	ldrh	r2, [r7, #2]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	611a      	str	r2, [r3, #16]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
	...

08000990 <MCAL_I2C_Init>:
* @param [in] 		-I2C_InitStruct: All I2C Configuration I2C_InintTypeDef
* @retval 			-None
* Note				-None
*/
void MCAL_I2C_Init(I2C_TypeDef* I2Cx, I2C_InintTypeDef* I2C_InitStruct)
{
 8000990:	b5b0      	push	{r4, r5, r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
	uint16_t tmpreg = 0, freqrange = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	82fb      	strh	r3, [r7, #22]
 800099e:	2300      	movs	r3, #0
 80009a0:	82bb      	strh	r3, [r7, #20]
	uint32_t pclk1 = 8000000;
 80009a2:	4b7b      	ldr	r3, [pc, #492]	; (8000b90 <MCAL_I2C_Init+0x200>)
 80009a4:	613b      	str	r3, [r7, #16]
	uint16_t result = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	81fb      	strh	r3, [r7, #14]
	// Enable Clock
	if		(I2Cx == I2C1) 		{	RCC_I2C1_CLK_EN();	Global_I2C_Config[I2C1_INDEX] = *I2C_InitStruct;	}
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a79      	ldr	r2, [pc, #484]	; (8000b94 <MCAL_I2C_Init+0x204>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d110      	bne.n	80009d4 <MCAL_I2C_Init+0x44>
 80009b2:	4b79      	ldr	r3, [pc, #484]	; (8000b98 <MCAL_I2C_Init+0x208>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	4a78      	ldr	r2, [pc, #480]	; (8000b98 <MCAL_I2C_Init+0x208>)
 80009b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009bc:	61d3      	str	r3, [r2, #28]
 80009be:	4a77      	ldr	r2, [pc, #476]	; (8000b9c <MCAL_I2C_Init+0x20c>)
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	4614      	mov	r4, r2
 80009c4:	461d      	mov	r5, r3
 80009c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80009d2:	e014      	b.n	80009fe <MCAL_I2C_Init+0x6e>
	else if	(I2Cx == I2C2) 		{	RCC_I2C2_CLK_EN();	Global_I2C_Config[I2C2_INDEX] = *I2C_InitStruct;	}
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a72      	ldr	r2, [pc, #456]	; (8000ba0 <MCAL_I2C_Init+0x210>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d110      	bne.n	80009fe <MCAL_I2C_Init+0x6e>
 80009dc:	4b6e      	ldr	r3, [pc, #440]	; (8000b98 <MCAL_I2C_Init+0x208>)
 80009de:	69db      	ldr	r3, [r3, #28]
 80009e0:	4a6d      	ldr	r2, [pc, #436]	; (8000b98 <MCAL_I2C_Init+0x208>)
 80009e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009e6:	61d3      	str	r3, [r2, #28]
 80009e8:	4b6c      	ldr	r3, [pc, #432]	; (8000b9c <MCAL_I2C_Init+0x20c>)
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	f103 0420 	add.w	r4, r3, #32
 80009f0:	4615      	mov	r5, r2
 80009f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if(I2C_InitStruct->Mode == I2C_Mode_I2C)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d17d      	bne.n	8000b02 <MCAL_I2C_Init+0x172>
	{
		/*---------------------------- INIT Timing------------------------*/
		tmpreg = I2Cx->CR2;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	82fb      	strh	r3, [r7, #22]
		// Clear frequency I2C_CR2.FREQ[5:0] bits
		tmpreg &= ~(I2C_CR2_FREQ_Msk);
 8000a0c:	8afb      	ldrh	r3, [r7, #22]
 8000a0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a12:	82fb      	strh	r3, [r7, #22]
		//Get pclk1 frequency value
		pclk1 = MCAL_RCC_GetPCLK1Freq();
 8000a14:	f000 f9f8 	bl	8000e08 <MCAL_RCC_GetPCLK1Freq>
 8000a18:	6138      	str	r0, [r7, #16]
		// Set frequency bits depending on pclk1 value
		freqrange = (uint16_t) (pclk1 / 1000000);
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	4a61      	ldr	r2, [pc, #388]	; (8000ba4 <MCAL_I2C_Init+0x214>)
 8000a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a22:	0c9b      	lsrs	r3, r3, #18
 8000a24:	82bb      	strh	r3, [r7, #20]
		tmpreg |= freqrange;
 8000a26:	8afa      	ldrh	r2, [r7, #22]
 8000a28:	8abb      	ldrh	r3, [r7, #20]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	82fb      	strh	r3, [r7, #22]
		// Write to I2Cx_CR2
		I2Cx->CR2 = tmpreg;
 8000a2e:	8afa      	ldrh	r2, [r7, #22]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	605a      	str	r2, [r3, #4]
		//• Configure the clock control registers I2C_CCR
		I2Cx->CR1 &= ~(I2C_CR1_PE);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f023 0201 	bic.w	r2, r3, #1
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	601a      	str	r2, [r3, #0]
		tmpreg = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	82fb      	strh	r3, [r7, #22]

		if((I2C_InitStruct->ClockSpeed == I2C_SCLK_SM_50K) ||(I2C_InitStruct->ClockSpeed == I2C_SCLK_SM_100K))
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a4c:	d004      	beq.n	8000a58 <MCAL_I2C_Init+0xc8>
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a55      	ldr	r2, [pc, #340]	; (8000ba8 <MCAL_I2C_Init+0x218>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d112      	bne.n	8000a7e <MCAL_I2C_Init+0xee>
		{
			// Tclk/2 = CRR * Tpclk1
			// CRR = Tclk / (2 * Tpclk1)
			// CRR = Fpclk1 / (2 * I2C_ClockFrequency)
			result = (uint16_t)(pclk1 / (I2C_InitStruct->ClockSpeed << 1));
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a64:	81fb      	strh	r3, [r7, #14]
			tmpreg |= result;
 8000a66:	8afa      	ldrh	r2, [r7, #22]
 8000a68:	89fb      	ldrh	r3, [r7, #14]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	82fb      	strh	r3, [r7, #22]
			I2Cx->CCR = tmpreg;
 8000a6e:	8afa      	ldrh	r2, [r7, #22]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	61da      	str	r2, [r3, #28]
			/*---------------------------- I2C_TRISE Configuration ------------------------*/
			I2Cx->TRISE = freqrange + 1;
 8000a74:	8abb      	ldrh	r3, [r7, #20]
 8000a76:	3301      	adds	r3, #1
 8000a78:	461a      	mov	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	621a      	str	r2, [r3, #32]
		{
			//Fast Mode not supported yet
		}
		/*---------------------------- I2C_CR1 Configuration ------------------------*/
		// Get the I2Cx CR1 value
		tmpreg = I2Cx->CR1;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	82fb      	strh	r3, [r7, #22]
		tmpreg |= (uint16_t)(I2C_InitStruct->ACK_Control | I2C_InitStruct->General_Call_Address_Detection | I2C_InitStruct->Mode | I2C_InitStruct->StretchMode);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	4313      	orrs	r3, r2
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	8afb      	ldrh	r3, [r7, #22]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	82fb      	strh	r3, [r7, #22]
		I2Cx->CR1 = tmpreg;
 8000aae:	8afa      	ldrh	r2, [r7, #22]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	601a      	str	r2, [r3, #0]

		/*---------------------------- I2Cx OAR1 & OAR2 Configuration ------------------------*/
		tmpreg = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	82fb      	strh	r3, [r7, #22]
		if(I2C_InitStruct->I2C_Slave_Address.Enable_Dual_ADD_ack == 1)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	899b      	ldrh	r3, [r3, #12]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d10d      	bne.n	8000adc <MCAL_I2C_Init+0x14c>
		{
			tmpreg = I2C_OAR2_ENDUAL;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	82fb      	strh	r3, [r7, #22]
			tmpreg |= I2C_InitStruct->I2C_Slave_Address.Secondary_slave_addres << I2C_OAR2_ADD2_Pos;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	8a1b      	ldrh	r3, [r3, #16]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	b21a      	sxth	r2, r3
 8000acc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	b21b      	sxth	r3, r3
 8000ad4:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tmpreg;
 8000ad6:	8afa      	ldrh	r2, [r7, #22]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	60da      	str	r2, [r3, #12]
		}
		tmpreg = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	82fb      	strh	r3, [r7, #22]
		tmpreg |= I2C_InitStruct->I2C_Slave_Address.Primary_slave_addres << 1;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	89db      	ldrh	r3, [r3, #14]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	b21a      	sxth	r2, r3
 8000ae8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	b21b      	sxth	r3, r3
 8000af0:	82fb      	strh	r3, [r7, #22]
		tmpreg |= I2C_InitStruct->I2C_Slave_Address.Addressing_Slave_mode;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	8a5a      	ldrh	r2, [r3, #18]
 8000af6:	8afb      	ldrh	r3, [r7, #22]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = tmpreg;
 8000afc:	8afa      	ldrh	r2, [r7, #22]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	609a      	str	r2, [r3, #8]
	else
	{
		//SMBUS Not Supported yet
	}
	//Interrupt Mode (Slave Mode) // Check callback pointer != NULL
	if (I2C_InitStruct->P_Slave_Event_CallBack != NULL) // That enable Slave IRQ State mode
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d038      	beq.n	8000b7c <MCAL_I2C_Init+0x1ec>
	{
		//Enable IRQ
		I2Cx->CR2 |= (I2C_CR2_ITERREN);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (I2C_CR2_ITEVTEN);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (I2C_CR2_ITBUFEN);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	605a      	str	r2, [r3, #4]
		if (I2Cx == I2C1)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a18      	ldr	r2, [pc, #96]	; (8000b94 <MCAL_I2C_Init+0x204>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d10c      	bne.n	8000b50 <MCAL_I2C_Init+0x1c0>
		{
			NVIC_IRQ31_I2C1_EV_Enable;
 8000b36:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <MCAL_I2C_Init+0x21c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <MCAL_I2C_Init+0x21c>)
 8000b3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b40:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_Enable;
 8000b42:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MCAL_I2C_Init+0x220>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a1a      	ldr	r2, [pc, #104]	; (8000bb0 <MCAL_I2C_Init+0x220>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6013      	str	r3, [r2, #0]
 8000b4e:	e00f      	b.n	8000b70 <MCAL_I2C_Init+0x1e0>
		}
		else if (I2Cx == I2C2)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a13      	ldr	r2, [pc, #76]	; (8000ba0 <MCAL_I2C_Init+0x210>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d10b      	bne.n	8000b70 <MCAL_I2C_Init+0x1e0>
		{
			NVIC_IRQ33_I2C2_EV_Enable;
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MCAL_I2C_Init+0x220>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <MCAL_I2C_Init+0x220>)
 8000b5e:	f043 0302 	orr.w	r3, r3, #2
 8000b62:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_Enable;
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <MCAL_I2C_Init+0x220>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a11      	ldr	r2, [pc, #68]	; (8000bb0 <MCAL_I2C_Init+0x220>)
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	6013      	str	r3, [r2, #0]
		}
		I2Cx->SR1 = 0;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]
		I2Cx->SR2 = 0;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
	}

	//Enable the selected I2C peripheral
	I2Cx->CR1 |= I2C_CR1_PE;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f043 0201 	orr.w	r2, r3, #1
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	601a      	str	r2, [r3, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bdb0      	pop	{r4, r5, r7, pc}
 8000b90:	007a1200 	.word	0x007a1200
 8000b94:	40005400 	.word	0x40005400
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	2000001c 	.word	0x2000001c
 8000ba0:	40005800 	.word	0x40005800
 8000ba4:	431bde83 	.word	0x431bde83
 8000ba8:	000186a0 	.word	0x000186a0
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000e104 	.word	0xe000e104

08000bb4 <MCAL_I2C_GPIO_Set_Pins>:
* @param [in] 		-I2Cx: where x can be (1..2 depending on device used)
* @retval 			-None
* Note				-Should enable the corresponding ALT & GPIO in RCC clock Also called after MCAL_I2C_Init()
*/
void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef* I2Cx)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;
	if (I2Cx == I2C1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a1f      	ldr	r2, [pc, #124]	; (8000c3c <MCAL_I2C_GPIO_Set_Pins+0x88>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d118      	bne.n	8000bf6 <MCAL_I2C_GPIO_Set_Pins+0x42>
	{
		// PB6: I2C1_SCL
		// PB7: I2C1_SDA
		PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000bc4:	2340      	movs	r3, #64	; 0x40
 8000bc6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000bc8:	2307      	movs	r3, #7
 8000bca:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	481a      	ldr	r0, [pc, #104]	; (8000c40 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000bd8:	f7ff fd5d 	bl	8000696 <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000be0:	2307      	movs	r3, #7
 8000be2:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	4619      	mov	r1, r3
 8000bee:	4814      	ldr	r0, [pc, #80]	; (8000c40 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000bf0:	f7ff fd51 	bl	8000696 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
		MCAL_GPIO_Init(GPIOB, &PinCfg);
	}
}
 8000bf4:	e01d      	b.n	8000c32 <MCAL_I2C_GPIO_Set_Pins+0x7e>
	else if (I2Cx == I2C2)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <MCAL_I2C_GPIO_Set_Pins+0x90>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d119      	bne.n	8000c32 <MCAL_I2C_GPIO_Set_Pins+0x7e>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c02:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000c04:	2307      	movs	r3, #7
 8000c06:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	4619      	mov	r1, r3
 8000c12:	480b      	ldr	r0, [pc, #44]	; (8000c40 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000c14:	f7ff fd3f 	bl	8000696 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000c18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c1c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000c1e:	2307      	movs	r3, #7
 8000c20:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000c22:	2301      	movs	r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000c2e:	f7ff fd32 	bl	8000696 <MCAL_GPIO_Init>
}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40005400 	.word	0x40005400
 8000c40:	40010c00 	.word	0x40010c00
 8000c44:	40005800 	.word	0x40005800

08000c48 <MCAL_I2C_Master_TX>:
* @param [in] 		-Stop: with or without stop condition at the end
* @param [in] 		-start: with or without start condition
* @retval 			-None
*/
void MCAL_I2C_Master_TX (I2C_TypeDef* I2Cx, uint16_t devAddr, uint8_t* dataOut, uint32_t dataLen, Stop_Condition Stop, Repeated_Start start)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	460b      	mov	r3, r1
 8000c56:	817b      	strh	r3, [r7, #10]
	int i = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
	// 1. Set The START bit in the I2C.CR1 register to generate a start condition
	I2C_GenerateSTART(I2Cx, ENABLE, start);
 8000c5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c60:	461a      	mov	r2, r3
 8000c62:	2101      	movs	r1, #1
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	f7ff fe31 	bl	80008cc <I2C_GenerateSTART>

	// 2. Wait for EV5
	while (!I2C_GetFlagStatus(I2Cx, EV5));
 8000c6a:	bf00      	nop
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f7ff fdac 	bl	80007cc <I2C_GetFlagStatus>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0f8      	beq.n	8000c6c <MCAL_I2C_Master_TX+0x24>

	// 3. Send Address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Transmitter); // address
 8000c7a:	897b      	ldrh	r3, [r7, #10]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	4619      	mov	r1, r3
 8000c80:	68f8      	ldr	r0, [r7, #12]
 8000c82:	f7ff fe65 	bl	8000950 <I2C_SendAddress>

	// 4. Wait EV6
	while (!I2C_GetFlagStatus(I2Cx, EV6));
 8000c86:	bf00      	nop
 8000c88:	2102      	movs	r1, #2
 8000c8a:	68f8      	ldr	r0, [r7, #12]
 8000c8c:	f7ff fd9e 	bl	80007cc <I2C_GetFlagStatus>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0f8      	beq.n	8000c88 <MCAL_I2C_Master_TX+0x40>

	// 5. TRA, BUSY, MSL, TXE flags
	while (!I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING));
 8000c96:	bf00      	nop
 8000c98:	4915      	ldr	r1, [pc, #84]	; (8000cf0 <MCAL_I2C_Master_TX+0xa8>)
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f7ff fd96 	bl	80007cc <I2C_GetFlagStatus>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d0f8      	beq.n	8000c98 <MCAL_I2C_Master_TX+0x50>

	for (i = 0; i < dataLen; ++i)
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	e011      	b.n	8000cd0 <MCAL_I2C_Master_TX+0x88>
	{
		// Write in the DR register the data to be sent
		I2Cx->DR = dataOut[i];
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	611a      	str	r2, [r3, #16]
		// 6. Wait EV8
		while (!I2C_GetFlagStatus(I2Cx, EV8));
 8000cba:	bf00      	nop
 8000cbc:	2104      	movs	r1, #4
 8000cbe:	68f8      	ldr	r0, [r7, #12]
 8000cc0:	f7ff fd84 	bl	80007cc <I2C_GetFlagStatus>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d0f8      	beq.n	8000cbc <MCAL_I2C_Master_TX+0x74>
	for (i = 0; i < dataLen; ++i)
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	683a      	ldr	r2, [r7, #0]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d8e9      	bhi.n	8000cac <MCAL_I2C_Master_TX+0x64>
	}

	// 7. Wait EV8_2
	//while (!I2C_GetFlagStatus(I2Cx, EV8_2));

	if(Stop == With_Stop)
 8000cd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d103      	bne.n	8000ce8 <MCAL_I2C_Master_TX+0xa0>
	{
		// 8. Send Stop condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f7ff fe19 	bl	800091a <I2C_GenerateSTOP>
	}
}
 8000ce8:	bf00      	nop
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	00070080 	.word	0x00070080

08000cf4 <MCAL_I2C_Master_RX>:
* @param [in] 		-Stop: with or without stop condition at the end
* @param [in] 		-start: with or without start condition
* @retval 			-None
*/
void MCAL_I2C_Master_RX (I2C_TypeDef* I2Cx, uint16_t devAddr, uint8_t* dataOut, uint32_t dataLen, Stop_Condition Stop, Repeated_Start start)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	460b      	mov	r3, r1
 8000d02:	817b      	strh	r3, [r7, #10]
	int i = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
	uint8_t index = I2Cx == I2C1 ? I2C1_INDEX : I2C2_INDEX;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4a2e      	ldr	r2, [pc, #184]	; (8000dc4 <MCAL_I2C_Master_RX+0xd0>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	bf14      	ite	ne
 8000d10:	2301      	movne	r3, #1
 8000d12:	2300      	moveq	r3, #0
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	74fb      	strb	r3, [r7, #19]
	// 1. Set The START bit in the I2C.CR1 register to generate a start condition
	I2C_GenerateSTART(I2Cx, ENABLE, start);
 8000d18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	2101      	movs	r1, #1
 8000d20:	68f8      	ldr	r0, [r7, #12]
 8000d22:	f7ff fdd3 	bl	80008cc <I2C_GenerateSTART>

	// 2. Wait for EV5
	while (!I2C_GetFlagStatus(I2Cx, EV5));
 8000d26:	bf00      	nop
 8000d28:	2101      	movs	r1, #1
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	f7ff fd4e 	bl	80007cc <I2C_GetFlagStatus>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d0f8      	beq.n	8000d28 <MCAL_I2C_Master_RX+0x34>

	// 3. Send Address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Reciever); // address
 8000d36:	897b      	ldrh	r3, [r7, #10]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	68f8      	ldr	r0, [r7, #12]
 8000d3e:	f7ff fe07 	bl	8000950 <I2C_SendAddress>

	// 4. Wait EV6
	while (!I2C_GetFlagStatus(I2Cx, EV6));
 8000d42:	bf00      	nop
 8000d44:	2102      	movs	r1, #2
 8000d46:	68f8      	ldr	r0, [r7, #12]
 8000d48:	f7ff fd40 	bl	80007cc <I2C_GetFlagStatus>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0f8      	beq.n	8000d44 <MCAL_I2C_Master_RX+0x50>


	// 5. Read data
	if (dataLen)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d01c      	beq.n	8000d92 <MCAL_I2C_Master_RX+0x9e>
	{
		// Read the data until Len becomes Zero
		for (i = dataLen; i > 1; --i)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	e012      	b.n	8000d84 <MCAL_I2C_Master_RX+0x90>
		{
			// Wait until RXNE becomes 1
			while (!I2C_GetFlagStatus(I2Cx, EV7));
 8000d5e:	bf00      	nop
 8000d60:	2103      	movs	r1, #3
 8000d62:	68f8      	ldr	r0, [r7, #12]
 8000d64:	f7ff fd32 	bl	80007cc <I2C_GetFlagStatus>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0f8      	beq.n	8000d60 <MCAL_I2C_Master_RX+0x6c>
			// Read the data from data register in to buffer
			*dataOut = I2Cx->DR;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	701a      	strb	r2, [r3, #0]
			//Read the buffer address
			dataOut++;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	607b      	str	r3, [r7, #4]
		for (i = dataLen; i > 1; --i)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3b01      	subs	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	dce9      	bgt.n	8000d5e <MCAL_I2C_Master_RX+0x6a>
		}
		I2C_AcknowledgeConfig(I2Cx, DISABLE);
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	68f8      	ldr	r0, [r7, #12]
 8000d8e:	f7ff fd01 	bl	8000794 <I2C_AcknowledgeConfig>
	}
	if (Stop == With_Stop)
 8000d92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d103      	bne.n	8000da2 <MCAL_I2C_Master_RX+0xae>
	{
		// 6. Send Stop condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	f7ff fdbc 	bl	800091a <I2C_GenerateSTOP>
	}

	// Re-enable ACKing
	if (Global_I2C_Config[index].ACK_Control == I2C_ACK_Enable)
 8000da2:	7cfb      	ldrb	r3, [r7, #19]
 8000da4:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <MCAL_I2C_Master_RX+0xd4>)
 8000da6:	015b      	lsls	r3, r3, #5
 8000da8:	4413      	add	r3, r2
 8000daa:	3314      	adds	r3, #20
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000db2:	d103      	bne.n	8000dbc <MCAL_I2C_Master_RX+0xc8>
	{
		I2C_AcknowledgeConfig(I2Cx, ENABLE);
 8000db4:	2101      	movs	r1, #1
 8000db6:	68f8      	ldr	r0, [r7, #12]
 8000db8:	f7ff fcec 	bl	8000794 <I2C_AcknowledgeConfig>
	}

}
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40005400 	.word	0x40005400
 8000dc8:	2000001c 	.word	0x2000001c

08000dcc <MCAL_RCC_GetSYS_CLKFreq>:
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512
const uint8_t AHBPressTable[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

uint32_t MCAL_RCC_GetSYS_CLKFreq(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable
	switch ((RCC->CFGR >> 2) & 0b11)
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <MCAL_RCC_GetSYS_CLKFreq+0x30>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	089b      	lsrs	r3, r3, #2
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d006      	beq.n	8000dec <MCAL_RCC_GetSYS_CLKFreq+0x20>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d302      	bcc.n	8000de8 <MCAL_RCC_GetSYS_CLKFreq+0x1c>
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d004      	beq.n	8000df0 <MCAL_RCC_GetSYS_CLKFreq+0x24>
 8000de6:	e005      	b.n	8000df4 <MCAL_RCC_GetSYS_CLKFreq+0x28>
	{
	case 0:
		return HSI_RC_Clk;
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <MCAL_RCC_GetSYS_CLKFreq+0x34>)
 8000dea:	e003      	b.n	8000df4 <MCAL_RCC_GetSYS_CLKFreq+0x28>
		break;

	case 1:
		return HSE_Clock;
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 8000dee:	e001      	b.n	8000df4 <MCAL_RCC_GetSYS_CLKFreq+0x28>
		break;

	case 2:
		return 16000000;
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 8000df2:	e7ff      	b.n	8000df4 <MCAL_RCC_GetSYS_CLKFreq+0x28>
		break;
	}
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	007a1200 	.word	0x007a1200
 8000e04:	00f42400 	.word	0x00f42400

08000e08 <MCAL_RCC_GetPCLK1Freq>:
{
//	Bits 7:4 HPRE: AHB prescaler
	return (MCAL_RCC_GetSYS_CLKFreq() >> AHBPressTable[((RCC->CFGR >> 4) & 0xF)]);
}
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_GetSYS_CLKFreq() >> APBPressTable[((RCC->CFGR >> 8) & 0b111)]);
 8000e0c:	f7ff ffde 	bl	8000dcc <MCAL_RCC_GetSYS_CLKFreq>
 8000e10:	4601      	mov	r1, r0
 8000e12:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	0a1b      	lsrs	r3, r3, #8
 8000e18:	f003 0307 	and.w	r3, r3, #7
 8000e1c:	4a03      	ldr	r2, [pc, #12]	; (8000e2c <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000e1e:	5cd3      	ldrb	r3, [r2, r3]
 8000e20:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000e24:	4618      	mov	r0, r3
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	08000f8c 	.word	0x08000f8c

08000e30 <SPI1_IRQHandler>:
}


//IRQ
void SPI1_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	irq_src.TXE = 	( (SPI1->SR & (1<<1)) >> 1);
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <SPI1_IRQHandler+0x54>)
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	085b      	lsrs	r3, r3, #1
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	793b      	ldrb	r3, [r7, #4]
 8000e44:	f362 0300 	bfi	r3, r2, #0, #1
 8000e48:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = 	( (SPI1->SR & (1<<0)) >> 0);
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <SPI1_IRQHandler+0x54>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	793b      	ldrb	r3, [r7, #4]
 8000e56:	f362 0341 	bfi	r3, r2, #1, #1
 8000e5a:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = 	( (SPI1->SR & (1<<4)) >> 4);
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <SPI1_IRQHandler+0x54>)
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	091b      	lsrs	r3, r3, #4
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	793b      	ldrb	r3, [r7, #4]
 8000e6a:	f362 0382 	bfi	r3, r2, #2, #1
 8000e6e:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI1_INDEX]->P_IRQ_Callback(irq_src);
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <SPI1_IRQHandler+0x58>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	7938      	ldrb	r0, [r7, #4]
 8000e78:	4798      	blx	r3
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40013000 	.word	0x40013000
 8000e88:	2000005c 	.word	0x2000005c

08000e8c <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	irq_src.TXE = 	( (SPI2->SR & (1<<1)) >> 1);
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <SPI2_IRQHandler+0x54>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	085b      	lsrs	r3, r3, #1
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	793b      	ldrb	r3, [r7, #4]
 8000ea0:	f362 0300 	bfi	r3, r2, #0, #1
 8000ea4:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = 	( (SPI2->SR & (1<<0)) >> 0);
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <SPI2_IRQHandler+0x54>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	793b      	ldrb	r3, [r7, #4]
 8000eb2:	f362 0341 	bfi	r3, r2, #1, #1
 8000eb6:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = 	( (SPI2->SR & (1<<4)) >> 4);
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <SPI2_IRQHandler+0x54>)
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	091b      	lsrs	r3, r3, #4
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	793b      	ldrb	r3, [r7, #4]
 8000ec6:	f362 0382 	bfi	r3, r2, #2, #1
 8000eca:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_INDEX]->P_IRQ_Callback(irq_src);
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <SPI2_IRQHandler+0x58>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	7938      	ldrb	r0, [r7, #4]
 8000ed4:	4798      	blx	r3
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40003800 	.word	0x40003800
 8000ee4:	2000005c 	.word	0x2000005c

08000ee8 <USART1_IRQHandler>:


//IRQ

void USART1_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	Global_UART_Config[0]->P_IRQ_CallBack();
 8000eec:	4b02      	ldr	r3, [pc, #8]	; (8000ef8 <USART1_IRQHandler+0x10>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	4798      	blx	r3
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000064 	.word	0x20000064

08000efc <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	Global_UART_Config[1]->P_IRQ_CallBack();
 8000f00:	4b02      	ldr	r3, [pc, #8]	; (8000f0c <USART2_IRQHandler+0x10>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	4798      	blx	r3
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000064 	.word	0x20000064

08000f10 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	Global_UART_Config[2]->P_IRQ_CallBack();
 8000f14:	4b02      	ldr	r3, [pc, #8]	; (8000f20 <USART3_IRQHandler+0x10>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	4798      	blx	r3
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000064 	.word	0x20000064

08000f24 <__libc_init_array>:
 8000f24:	b570      	push	{r4, r5, r6, lr}
 8000f26:	2500      	movs	r5, #0
 8000f28:	4e0c      	ldr	r6, [pc, #48]	; (8000f5c <__libc_init_array+0x38>)
 8000f2a:	4c0d      	ldr	r4, [pc, #52]	; (8000f60 <__libc_init_array+0x3c>)
 8000f2c:	1ba4      	subs	r4, r4, r6
 8000f2e:	10a4      	asrs	r4, r4, #2
 8000f30:	42a5      	cmp	r5, r4
 8000f32:	d109      	bne.n	8000f48 <__libc_init_array+0x24>
 8000f34:	f000 f81a 	bl	8000f6c <_init>
 8000f38:	2500      	movs	r5, #0
 8000f3a:	4e0a      	ldr	r6, [pc, #40]	; (8000f64 <__libc_init_array+0x40>)
 8000f3c:	4c0a      	ldr	r4, [pc, #40]	; (8000f68 <__libc_init_array+0x44>)
 8000f3e:	1ba4      	subs	r4, r4, r6
 8000f40:	10a4      	asrs	r4, r4, #2
 8000f42:	42a5      	cmp	r5, r4
 8000f44:	d105      	bne.n	8000f52 <__libc_init_array+0x2e>
 8000f46:	bd70      	pop	{r4, r5, r6, pc}
 8000f48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f4c:	4798      	blx	r3
 8000f4e:	3501      	adds	r5, #1
 8000f50:	e7ee      	b.n	8000f30 <__libc_init_array+0xc>
 8000f52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f56:	4798      	blx	r3
 8000f58:	3501      	adds	r5, #1
 8000f5a:	e7f2      	b.n	8000f42 <__libc_init_array+0x1e>
 8000f5c:	08000f94 	.word	0x08000f94
 8000f60:	08000f94 	.word	0x08000f94
 8000f64:	08000f94 	.word	0x08000f94
 8000f68:	08000f98 	.word	0x08000f98

08000f6c <_init>:
 8000f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6e:	bf00      	nop
 8000f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f72:	bc08      	pop	{r3}
 8000f74:	469e      	mov	lr, r3
 8000f76:	4770      	bx	lr

08000f78 <_fini>:
 8000f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7a:	bf00      	nop
 8000f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f7e:	bc08      	pop	{r3}
 8000f80:	469e      	mov	lr, r3
 8000f82:	4770      	bx	lr
