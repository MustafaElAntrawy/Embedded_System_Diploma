
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d9c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000ecc  08000ecc  00010ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ed4  08000ed4  00010edc  2**0
                  CONTENTS
  4 .ARM          00000000  08000ed4  08000ed4  00010edc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ed4  08000edc  00010edc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ed4  08000ed4  00010ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ed8  08000ed8  00010ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010edc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000000  08000edc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000edc  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010edc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000050dc  00000000  00000000  00010f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c59  00000000  00000000  00015fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d78  00000000  00000000  00016c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000230  00000000  00000000  000179b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c8  00000000  00000000  00017be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001222  00000000  00000000  00017db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002b1e  00000000  00000000  00018fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000ae90  00000000  00000000  0001baf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00026980  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006fc  00000000  00000000  000269fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000eb4 	.word	0x08000eb4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000eb4 	.word	0x08000eb4

08000170 <clock_init>:


unsigned char ch;

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Clock Enable
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <SPI1_IRQ_Callback>:

void SPI1_IRQ_Callback(struct S_IRQ_SRC irq_src)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	7138      	strb	r0, [r7, #4]
#ifdef MCU_Act_As_Slave
	if (irq_src.RXNE)
 80001ac:	793b      	ldrb	r3, [r7, #4]
 80001ae:	f003 0302 	and.w	r3, r3, #2
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d00c      	beq.n	80001d2 <SPI1_IRQ_Callback+0x2e>
	{
		ch = 0xf;
 80001b8:	4b08      	ldr	r3, [pc, #32]	; (80001dc <SPI1_IRQ_Callback+0x38>)
 80001ba:	220f      	movs	r2, #15
 80001bc:	701a      	strb	r2, [r3, #0]
		MCAL_SPI_TX_RX(SPI1, &ch, Pollingenable);
 80001be:	2200      	movs	r2, #0
 80001c0:	4906      	ldr	r1, [pc, #24]	; (80001dc <SPI1_IRQ_Callback+0x38>)
 80001c2:	4807      	ldr	r0, [pc, #28]	; (80001e0 <SPI1_IRQ_Callback+0x3c>)
 80001c4:	f000 fc44 	bl	8000a50 <MCAL_SPI_TX_RX>
		MCAL_UART_SendData(USART1, &ch, enable);
 80001c8:	2200      	movs	r2, #0
 80001ca:	4904      	ldr	r1, [pc, #16]	; (80001dc <SPI1_IRQ_Callback+0x38>)
 80001cc:	4805      	ldr	r0, [pc, #20]	; (80001e4 <SPI1_IRQ_Callback+0x40>)
 80001ce:	f000 fd8d 	bl	8000cec <MCAL_UART_SendData>
	}
#endif
}
 80001d2:	bf00      	nop
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	20000030 	.word	0x20000030
 80001e0:	40013000 	.word	0x40013000
 80001e4:	40013800 	.word	0x40013800

080001e8 <UART_IRQ_Callback>:

void UART_IRQ_Callback(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	//Send to SPI
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
	MCAL_SPI_TX_RX(SPI1, &ch, Pollingenable);
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
#endif
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr

080001f4 <main>:



int main()
{ 
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b08c      	sub	sp, #48	; 0x30
 80001f8:	af00      	add	r7, sp, #0
	clock_init();
 80001fa:	f7ff ffb9 	bl	8000170 <clock_init>

	//================UART INIT=================
	UART_Config uartCFG;

	uartCFG.BoudRate = UART_BaudRate_115200;
 80001fe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000202:	623b      	str	r3, [r7, #32]
	uartCFG.HwFlowCtl = UART_HwFlowCtl_NONE;
 8000204:	2300      	movs	r3, #0
 8000206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uartCFG.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 800020a:	2320      	movs	r3, #32
 800020c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uartCFG.P_IRQ_CallBack = UART_IRQ_Callback;
 8000210:	4b19      	ldr	r3, [pc, #100]	; (8000278 <main+0x84>)
 8000212:	62fb      	str	r3, [r7, #44]	; 0x2c
	uartCFG.Parity = UART_Parity__NONE;
 8000214:	2300      	movs	r3, #0
 8000216:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uartCFG.Payload_length = UART_Payload_Length_8B;
 800021a:	2300      	movs	r3, #0
 800021c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uartCFG.StopBits = UART_StopBits__1;
 8000220:	2300      	movs	r3, #0
 8000222:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uartCFG.USART_Mode = UART_Mode_Tx_Rx;
 8000226:	230c      	movs	r3, #12
 8000228:	773b      	strb	r3, [r7, #28]

	MCAL_UART_Init(USART1, &uartCFG);
 800022a:	f107 031c 	add.w	r3, r7, #28
 800022e:	4619      	mov	r1, r3
 8000230:	4812      	ldr	r0, [pc, #72]	; (800027c <main+0x88>)
 8000232:	f000 fc93 	bl	8000b5c <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 8000236:	4811      	ldr	r0, [pc, #68]	; (800027c <main+0x88>)
 8000238:	f000 fd94 	bl	8000d64 <MCAL_UART_GPIO_Set_Pins>

	//================SPI INIT==================
	SPI_Config SPI1CFG;
	// Common Configuration
	SPI1CFG.CLKPhase = SPI_CLKPhase_2EDGE_first_data_capture_edge;
 800023c:	2301      	movs	r3, #1
 800023e:	81fb      	strh	r3, [r7, #14]
	SPI1CFG.CLKPolarity = SPI_CLKPolarity_HIGH_when_idle;
 8000240:	2302      	movs	r3, #2
 8000242:	81bb      	strh	r3, [r7, #12]
	SPI1CFG.DataSize = SPI_DataSize_8BIT;
 8000244:	2300      	movs	r3, #0
 8000246:	817b      	strh	r3, [r7, #10]
	SPI1CFG.Frame_Format = SPI_Frame_Format_MSB_transmitted_first;
 8000248:	2300      	movs	r3, #0
 800024a:	813b      	strh	r3, [r7, #8]
	//Assume by default pclk2 = 8MHZ
	SPI1CFG.SPI_BAUDRATEPRESCALER = SPI_BAUDRATEPRESCALER_8;
 800024c:	2310      	movs	r3, #16
 800024e:	827b      	strh	r3, [r7, #18]
	SPI1CFG.Communication_Mode = SPI_DIRECTION_2LINES;
 8000250:	2300      	movs	r3, #0
 8000252:	80fb      	strh	r3, [r7, #6]
	//Force the slave select (High) idle mode
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
#endif

#ifdef MCU_Act_As_Slave
	SPI1CFG.Device_Mode = SPI_Device_Mode_SLAVE;
 8000254:	2300      	movs	r3, #0
 8000256:	80bb      	strh	r3, [r7, #4]
	SPI1CFG.IRQ_Enable = SPI_IRQ_Enable_RXNEIE;
 8000258:	2340      	movs	r3, #64	; 0x40
 800025a:	82bb      	strh	r3, [r7, #20]
	SPI1CFG.NSS = SPI_NSS_Hard_Slave;
 800025c:	2300      	movs	r3, #0
 800025e:	823b      	strh	r3, [r7, #16]
	SPI1CFG.P_IRQ_Callback = SPI1_IRQ_Callback;
 8000260:	4b07      	ldr	r3, [pc, #28]	; (8000280 <main+0x8c>)
 8000262:	61bb      	str	r3, [r7, #24]
#endif

	MCAL_SPI_Init(SPI1, &SPI1CFG);
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	4619      	mov	r1, r3
 8000268:	4806      	ldr	r0, [pc, #24]	; (8000284 <main+0x90>)
 800026a:	f000 fa6f 	bl	800074c <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 800026e:	4805      	ldr	r0, [pc, #20]	; (8000284 <main+0x90>)
 8000270:	f000 faf8 	bl	8000864 <MCAL_SPI_GPIO_Set_Pins>



	while (1){
 8000274:	e7fe      	b.n	8000274 <main+0x80>
 8000276:	bf00      	nop
 8000278:	080001e9 	.word	0x080001e9
 800027c:	40013800 	.word	0x40013800
 8000280:	080001a5 	.word	0x080001a5
 8000284:	40013000 	.word	0x40013000

08000288 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000288:	480d      	ldr	r0, [pc, #52]	; (80002c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800028c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000290:	480c      	ldr	r0, [pc, #48]	; (80002c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000292:	490d      	ldr	r1, [pc, #52]	; (80002c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000294:	4a0d      	ldr	r2, [pc, #52]	; (80002cc <LoopForever+0xe>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000298:	e002      	b.n	80002a0 <LoopCopyDataInit>

0800029a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800029c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029e:	3304      	adds	r3, #4

080002a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a4:	d3f9      	bcc.n	800029a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a6:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a8:	4c0a      	ldr	r4, [pc, #40]	; (80002d4 <LoopForever+0x16>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ac:	e001      	b.n	80002b2 <LoopFillZerobss>

080002ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b0:	3204      	adds	r2, #4

080002b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b4:	d3fb      	bcc.n	80002ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b6:	f000 fdd9 	bl	8000e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ba:	f7ff ff9b 	bl	80001f4 <main>

080002be <LoopForever>:

LoopForever:
    b LoopForever
 80002be:	e7fe      	b.n	80002be <LoopForever>
  ldr   r0, =_estack
 80002c0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002cc:	08000edc 	.word	0x08000edc
  ldr r2, =_sbss
 80002d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d4:	20000070 	.word	0x20000070

080002d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d8:	e7fe      	b.n	80002d8 <ADC1_2_IRQHandler>
	...

080002dc <EXTI0_IRQHandler>:

//=================================================================
//ISR Functions:
//=================================================================
void EXTI0_IRQHandler()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	//Cleared by writing a '1' into the bit -Pending register (EXTI_PR)
	EXTI->PR |= 1 << 0;
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <EXTI0_IRQHandler+0x1c>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <EXTI0_IRQHandler+0x1c>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	6153      	str	r3, [r2, #20]
	//Callback
	GP_IRQ_CallBack[0]();
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <EXTI0_IRQHandler+0x20>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4798      	blx	r3

}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40010400 	.word	0x40010400
 80002fc:	20000034 	.word	0x20000034

08000300 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler()
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	EXTI->PR |= 1 << 1;
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <EXTI1_IRQHandler+0x1c>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a04      	ldr	r2, [pc, #16]	; (800031c <EXTI1_IRQHandler+0x1c>)
 800030a:	f043 0302 	orr.w	r3, r3, #2
 800030e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <EXTI1_IRQHandler+0x20>)
 8000312:	685b      	ldr	r3, [r3, #4]
 8000314:	4798      	blx	r3
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40010400 	.word	0x40010400
 8000320:	20000034 	.word	0x20000034

08000324 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler()
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	EXTI->PR |= 1 << 2;
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <EXTI2_IRQHandler+0x1c>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <EXTI2_IRQHandler+0x1c>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <EXTI2_IRQHandler+0x20>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	4798      	blx	r3
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40010400 	.word	0x40010400
 8000344:	20000034 	.word	0x20000034

08000348 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler()
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1 << 3;
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <EXTI3_IRQHandler+0x1c>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	4a04      	ldr	r2, [pc, #16]	; (8000364 <EXTI3_IRQHandler+0x1c>)
 8000352:	f043 0308 	orr.w	r3, r3, #8
 8000356:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8000358:	4b03      	ldr	r3, [pc, #12]	; (8000368 <EXTI3_IRQHandler+0x20>)
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	4798      	blx	r3
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40010400 	.word	0x40010400
 8000368:	20000034 	.word	0x20000034

0800036c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler()
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1 << 4;
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI4_IRQHandler+0x1c>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI4_IRQHandler+0x1c>)
 8000376:	f043 0310 	orr.w	r3, r3, #16
 800037a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 800037c:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI4_IRQHandler+0x20>)
 800037e:	691b      	ldr	r3, [r3, #16]
 8000380:	4798      	blx	r3
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40010400 	.word	0x40010400
 800038c:	20000034 	.word	0x20000034

08000390 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler()
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 5) { EXTI->PR |= (1<<5); 	GP_IRQ_CallBack[5](); }
 8000394:	4b26      	ldr	r3, [pc, #152]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	f003 0320 	and.w	r3, r3, #32
 800039c:	2b00      	cmp	r3, #0
 800039e:	d008      	beq.n	80003b2 <EXTI9_5_IRQHandler+0x22>
 80003a0:	4b23      	ldr	r3, [pc, #140]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	4a22      	ldr	r2, [pc, #136]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003a6:	f043 0320 	orr.w	r3, r3, #32
 80003aa:	6153      	str	r3, [r2, #20]
 80003ac:	4b21      	ldr	r3, [pc, #132]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4798      	blx	r3
	if(EXTI->PR & 1 << 6) { EXTI->PR |= (1<<6); 	GP_IRQ_CallBack[6](); }
 80003b2:	4b1f      	ldr	r3, [pc, #124]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d008      	beq.n	80003d0 <EXTI9_5_IRQHandler+0x40>
 80003be:	4b1c      	ldr	r3, [pc, #112]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a1b      	ldr	r2, [pc, #108]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c8:	6153      	str	r3, [r2, #20]
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	4798      	blx	r3
	if(EXTI->PR & 1 << 7) { EXTI->PR |= (1<<7); 	GP_IRQ_CallBack[7](); }
 80003d0:	4b17      	ldr	r3, [pc, #92]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d008      	beq.n	80003ee <EXTI9_5_IRQHandler+0x5e>
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	4a13      	ldr	r2, [pc, #76]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e6:	6153      	str	r3, [r2, #20]
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 80003ea:	69db      	ldr	r3, [r3, #28]
 80003ec:	4798      	blx	r3
	if(EXTI->PR & 1 << 8) { EXTI->PR |= (1<<8); 	GP_IRQ_CallBack[8](); }
 80003ee:	4b10      	ldr	r3, [pc, #64]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d008      	beq.n	800040c <EXTI9_5_IRQHandler+0x7c>
 80003fa:	4b0d      	ldr	r3, [pc, #52]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	4a0c      	ldr	r2, [pc, #48]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 8000400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000404:	6153      	str	r3, [r2, #20]
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 8000408:	6a1b      	ldr	r3, [r3, #32]
 800040a:	4798      	blx	r3
	if(EXTI->PR & 1 << 9) { EXTI->PR |= (1<<9); 	GP_IRQ_CallBack[9](); }
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000414:	2b00      	cmp	r3, #0
 8000416:	d008      	beq.n	800042a <EXTI9_5_IRQHandler+0x9a>
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 800041e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000422:	6153      	str	r3, [r2, #20]
 8000424:	4b03      	ldr	r3, [pc, #12]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 8000426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000428:	4798      	blx	r3

}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40010400 	.word	0x40010400
 8000434:	20000034 	.word	0x20000034

08000438 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler()
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 10) { EXTI->PR |= (1<<10); 	GP_IRQ_CallBack[10](); }
 800043c:	4b2d      	ldr	r3, [pc, #180]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000444:	2b00      	cmp	r3, #0
 8000446:	d008      	beq.n	800045a <EXTI15_10_IRQHandler+0x22>
 8000448:	4b2a      	ldr	r3, [pc, #168]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	4a29      	ldr	r2, [pc, #164]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800044e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000452:	6153      	str	r3, [r2, #20]
 8000454:	4b28      	ldr	r3, [pc, #160]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 8000456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000458:	4798      	blx	r3
	if(EXTI->PR & 1 << 11) { EXTI->PR |= (1<<11); 	GP_IRQ_CallBack[11](); }
 800045a:	4b26      	ldr	r3, [pc, #152]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000462:	2b00      	cmp	r3, #0
 8000464:	d008      	beq.n	8000478 <EXTI15_10_IRQHandler+0x40>
 8000466:	4b23      	ldr	r3, [pc, #140]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a22      	ldr	r2, [pc, #136]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800046c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	4b21      	ldr	r3, [pc, #132]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 8000474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000476:	4798      	blx	r3
	if(EXTI->PR & 1 << 12) { EXTI->PR |= (1<<12); 	GP_IRQ_CallBack[12](); }
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000480:	2b00      	cmp	r3, #0
 8000482:	d008      	beq.n	8000496 <EXTI15_10_IRQHandler+0x5e>
 8000484:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	4a1a      	ldr	r2, [pc, #104]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800048a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800048e:	6153      	str	r3, [r2, #20]
 8000490:	4b19      	ldr	r3, [pc, #100]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	4798      	blx	r3
	if(EXTI->PR & 1 << 13) { EXTI->PR |= (1<<13); 	GP_IRQ_CallBack[13](); }
 8000496:	4b17      	ldr	r3, [pc, #92]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d008      	beq.n	80004b4 <EXTI15_10_IRQHandler+0x7c>
 80004a2:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a13      	ldr	r2, [pc, #76]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 80004b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004b2:	4798      	blx	r3
	if(EXTI->PR & 1 << 14) { EXTI->PR |= (1<<14); 	GP_IRQ_CallBack[14](); }
 80004b4:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d008      	beq.n	80004d2 <EXTI15_10_IRQHandler+0x9a>
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ca:	6153      	str	r3, [r2, #20]
 80004cc:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 80004ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004d0:	4798      	blx	r3
	if(EXTI->PR & 1 << 15) { EXTI->PR |= (1<<15); 	GP_IRQ_CallBack[15](); }
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d008      	beq.n	80004f0 <EXTI15_10_IRQHandler+0xb8>
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 80004ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004ee:	4798      	blx	r3
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40010400 	.word	0x40010400
 80004f8:	20000034 	.word	0x20000034

080004fc <Get_CRLH_Position>:
 *      Author: Antrawy
 */
#include "Stm32F103C6_GPIO_Driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber){
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	2b80      	cmp	r3, #128	; 0x80
 800050a:	d042      	beq.n	8000592 <Get_CRLH_Position+0x96>
 800050c:	2b80      	cmp	r3, #128	; 0x80
 800050e:	dc11      	bgt.n	8000534 <Get_CRLH_Position+0x38>
 8000510:	2b08      	cmp	r3, #8
 8000512:	d036      	beq.n	8000582 <Get_CRLH_Position+0x86>
 8000514:	2b08      	cmp	r3, #8
 8000516:	dc06      	bgt.n	8000526 <Get_CRLH_Position+0x2a>
 8000518:	2b02      	cmp	r3, #2
 800051a:	d02e      	beq.n	800057a <Get_CRLH_Position+0x7e>
 800051c:	2b04      	cmp	r3, #4
 800051e:	d02e      	beq.n	800057e <Get_CRLH_Position+0x82>
 8000520:	2b01      	cmp	r3, #1
 8000522:	d028      	beq.n	8000576 <Get_CRLH_Position+0x7a>
 8000524:	e047      	b.n	80005b6 <Get_CRLH_Position+0xba>
 8000526:	2b20      	cmp	r3, #32
 8000528:	d02f      	beq.n	800058a <Get_CRLH_Position+0x8e>
 800052a:	2b40      	cmp	r3, #64	; 0x40
 800052c:	d02f      	beq.n	800058e <Get_CRLH_Position+0x92>
 800052e:	2b10      	cmp	r3, #16
 8000530:	d029      	beq.n	8000586 <Get_CRLH_Position+0x8a>
 8000532:	e040      	b.n	80005b6 <Get_CRLH_Position+0xba>
 8000534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000538:	d033      	beq.n	80005a2 <Get_CRLH_Position+0xa6>
 800053a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800053e:	dc09      	bgt.n	8000554 <Get_CRLH_Position+0x58>
 8000540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000544:	d029      	beq.n	800059a <Get_CRLH_Position+0x9e>
 8000546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800054a:	d028      	beq.n	800059e <Get_CRLH_Position+0xa2>
 800054c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000550:	d021      	beq.n	8000596 <Get_CRLH_Position+0x9a>
 8000552:	e030      	b.n	80005b6 <Get_CRLH_Position+0xba>
 8000554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000558:	d027      	beq.n	80005aa <Get_CRLH_Position+0xae>
 800055a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800055e:	dc03      	bgt.n	8000568 <Get_CRLH_Position+0x6c>
 8000560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000564:	d01f      	beq.n	80005a6 <Get_CRLH_Position+0xaa>
 8000566:	e026      	b.n	80005b6 <Get_CRLH_Position+0xba>
 8000568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800056c:	d01f      	beq.n	80005ae <Get_CRLH_Position+0xb2>
 800056e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000572:	d01e      	beq.n	80005b2 <Get_CRLH_Position+0xb6>
 8000574:	e01f      	b.n	80005b6 <Get_CRLH_Position+0xba>
	case GPIO_PIN_0:
		return 0;
 8000576:	2300      	movs	r3, #0
 8000578:	e01e      	b.n	80005b8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 800057a:	2304      	movs	r3, #4
 800057c:	e01c      	b.n	80005b8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 800057e:	2308      	movs	r3, #8
 8000580:	e01a      	b.n	80005b8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000582:	230c      	movs	r3, #12
 8000584:	e018      	b.n	80005b8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000586:	2310      	movs	r3, #16
 8000588:	e016      	b.n	80005b8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 800058a:	2314      	movs	r3, #20
 800058c:	e014      	b.n	80005b8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 800058e:	2318      	movs	r3, #24
 8000590:	e012      	b.n	80005b8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000592:	231c      	movs	r3, #28
 8000594:	e010      	b.n	80005b8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 8000596:	2300      	movs	r3, #0
 8000598:	e00e      	b.n	80005b8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 800059a:	2304      	movs	r3, #4
 800059c:	e00c      	b.n	80005b8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 800059e:	2308      	movs	r3, #8
 80005a0:	e00a      	b.n	80005b8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 80005a2:	230c      	movs	r3, #12
 80005a4:	e008      	b.n	80005b8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 80005a6:	2310      	movs	r3, #16
 80005a8:	e006      	b.n	80005b8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 80005aa:	2314      	movs	r3, #20
 80005ac:	e004      	b.n	80005b8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 80005ae:	2318      	movs	r3, #24
 80005b0:	e002      	b.n	80005b8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 80005b2:	231c      	movs	r3, #28
 80005b4:	e000      	b.n	80005b8 <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 80005b6:	2300      	movs	r3, #0
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <MCAL_GPIO_Init>:
* @retval 			-None
* Note				-Stm32F103C6 MCU has GPIO A, B, C, D, E Modules
* 					But LQFP48 Package jas only GPIO A, B, PART of C/D exported as external PINs from the Module
*/

void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig){
 80005c2:	b590      	push	{r4, r7, lr}
 80005c4:	b085      	sub	sp, #20
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	6039      	str	r1, [r7, #0]
	//Port configuration low (GPIO_CRL) Configure PINS from 0 >> 7
	//Port configuration high (GPIO_CRH) Configure PINS from 8 >> 15
	volatile uint32_t *configRegister = NULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	73fb      	strb	r3, [r7, #15]

	configRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	2bff      	cmp	r3, #255	; 0xff
 80005da:	d801      	bhi.n	80005e0 <MCAL_GPIO_Init+0x1e>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	e001      	b.n	80005e4 <MCAL_GPIO_Init+0x22>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3304      	adds	r3, #4
 80005e4:	60bb      	str	r3, [r7, #8]

	//Clear CNF[1:0] MODE[1:0]
	(*configRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ff86 	bl	80004fc <Get_CRLH_Position>
 80005f0:	4603      	mov	r3, r0
 80005f2:	461a      	mov	r2, r3
 80005f4:	230f      	movs	r3, #15
 80005f6:	4093      	lsls	r3, r2
 80005f8:	43da      	mvns	r2, r3
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	401a      	ands	r2, r3
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	601a      	str	r2, [r3, #0]

	//If Pin is output
	if ((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)){
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	789b      	ldrb	r3, [r3, #2]
 8000608:	2b07      	cmp	r3, #7
 800060a:	d00b      	beq.n	8000624 <MCAL_GPIO_Init+0x62>
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	789b      	ldrb	r3, [r3, #2]
 8000610:	2b06      	cmp	r3, #6
 8000612:	d007      	beq.n	8000624 <MCAL_GPIO_Init+0x62>
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	789b      	ldrb	r3, [r3, #2]
 8000618:	2b05      	cmp	r3, #5
 800061a:	d003      	beq.n	8000624 <MCAL_GPIO_Init+0x62>
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	789b      	ldrb	r3, [r3, #2]
 8000620:	2b04      	cmp	r3, #4
 8000622:	d10e      	bne.n	8000642 <MCAL_GPIO_Init+0x80>
		//Set CNF[1:0] MODE[1:0]
		PIN_Config = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F);
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	789b      	ldrb	r3, [r3, #2]
 8000628:	3b04      	subs	r3, #4
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	b25a      	sxtb	r2, r3
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	78db      	ldrb	r3, [r3, #3]
 8000632:	b25b      	sxtb	r3, r3
 8000634:	4313      	orrs	r3, r2
 8000636:	b25b      	sxtb	r3, r3
 8000638:	b2db      	uxtb	r3, r3
 800063a:	f003 030f 	and.w	r3, r3, #15
 800063e:	73fb      	strb	r3, [r7, #15]
 8000640:	e02c      	b.n	800069c <MCAL_GPIO_Init+0xda>
	}
	//If Pin is input
	else{
		if ((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG)){
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	789b      	ldrb	r3, [r3, #2]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d003      	beq.n	8000652 <MCAL_GPIO_Init+0x90>
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	789b      	ldrb	r3, [r3, #2]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d107      	bne.n	8000662 <MCAL_GPIO_Init+0xa0>
			PIN_Config = ( ( (PinConfig->GPIO_MODE << 2) | 0x0 ) & 0x0F);
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	789b      	ldrb	r3, [r3, #2]
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f003 030f 	and.w	r3, r3, #15
 800065e:	73fb      	strb	r3, [r7, #15]
 8000660:	e01c      	b.n	800069c <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT){
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	789b      	ldrb	r3, [r3, #2]
 8000666:	2b08      	cmp	r3, #8
 8000668:	d102      	bne.n	8000670 <MCAL_GPIO_Init+0xae>
			PIN_Config = ( ( (GPIO_MODE_INPUT_FLO << 2) | 0x0 ) & 0x0F);
 800066a:	2304      	movs	r3, #4
 800066c:	73fb      	strb	r3, [r7, #15]
 800066e:	e015      	b.n	800069c <MCAL_GPIO_Init+0xda>
		}
		//PU or PD input
		else{
			PIN_Config = ( ( (GPIO_MODE_INPUT_PU << 2) | 0x0 ) & 0x0F);
 8000670:	2308      	movs	r3, #8
 8000672:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU){
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	789b      	ldrb	r3, [r3, #2]
 8000678:	2b02      	cmp	r3, #2
 800067a:	d107      	bne.n	800068c <MCAL_GPIO_Init+0xca>
				//Table 20, Port bit configuration table PxODR 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	683a      	ldr	r2, [r7, #0]
 8000682:	8812      	ldrh	r2, [r2, #0]
 8000684:	431a      	orrs	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	e007      	b.n	800069c <MCAL_GPIO_Init+0xda>
			}else{
				//Table 20, Port bit configuration table PxODR 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	8812      	ldrh	r2, [r2, #0]
 8000694:	43d2      	mvns	r2, r2
 8000696:	401a      	ands	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*configRegister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800069c:	7bfc      	ldrb	r4, [r7, #15]
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff2a 	bl	80004fc <Get_CRLH_Position>
 80006a8:	4603      	mov	r3, r0
 80006aa:	fa04 f203 	lsl.w	r2, r4, r3
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	431a      	orrs	r2, r3
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	601a      	str	r2, [r3, #0]

}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd90      	pop	{r4, r7, pc}

080006c0 <MCAL_RCC_GetSYS_CLKFreq>:
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512
const uint8_t AHBPressTable[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

uint32_t MCAL_RCC_GetSYS_CLKFreq(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable
	switch ((RCC->CFGR >> 2) & 0b11)
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MCAL_RCC_GetSYS_CLKFreq+0x30>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	089b      	lsrs	r3, r3, #2
 80006ca:	f003 0303 	and.w	r3, r3, #3
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d006      	beq.n	80006e0 <MCAL_RCC_GetSYS_CLKFreq+0x20>
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d302      	bcc.n	80006dc <MCAL_RCC_GetSYS_CLKFreq+0x1c>
 80006d6:	2b02      	cmp	r3, #2
 80006d8:	d004      	beq.n	80006e4 <MCAL_RCC_GetSYS_CLKFreq+0x24>
 80006da:	e005      	b.n	80006e8 <MCAL_RCC_GetSYS_CLKFreq+0x28>
	{
	case 0:
		return HSI_RC_Clk;
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <MCAL_RCC_GetSYS_CLKFreq+0x34>)
 80006de:	e003      	b.n	80006e8 <MCAL_RCC_GetSYS_CLKFreq+0x28>
		break;

	case 1:
		return HSE_Clock;
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 80006e2:	e001      	b.n	80006e8 <MCAL_RCC_GetSYS_CLKFreq+0x28>
		break;

	case 2:
		return 16000000;
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 80006e6:	e7ff      	b.n	80006e8 <MCAL_RCC_GetSYS_CLKFreq+0x28>
		break;
	}
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	40021000 	.word	0x40021000
 80006f4:	007a1200 	.word	0x007a1200
 80006f8:	00f42400 	.word	0x00f42400

080006fc <MCAL_RCC_GetPCLK1Freq>:
{
//	Bits 7:4 HPRE: AHB prescaler
	return (MCAL_RCC_GetSYS_CLKFreq() >> AHBPressTable[((RCC->CFGR >> 4) & 0xF)]);
}
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_GetSYS_CLKFreq() >> APBPressTable[((RCC->CFGR >> 8) & 0b111)]);
 8000700:	f7ff ffde 	bl	80006c0 <MCAL_RCC_GetSYS_CLKFreq>
 8000704:	4601      	mov	r1, r0
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	0a1b      	lsrs	r3, r3, #8
 800070c:	f003 0307 	and.w	r3, r3, #7
 8000710:	4a03      	ldr	r2, [pc, #12]	; (8000720 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000712:	5cd3      	ldrb	r3, [r2, r3]
 8000714:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000718:	4618      	mov	r0, r3
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40021000 	.word	0x40021000
 8000720:	08000ecc 	.word	0x08000ecc

08000724 <MCAL_RCC_GetPCLK2Freq>:
uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2: APB low-speed prescaler (APB2)
	return (MCAL_RCC_GetSYS_CLKFreq() >> APBPressTable[((RCC->CFGR >> 11) & 0b111)]);
 8000728:	f7ff ffca 	bl	80006c0 <MCAL_RCC_GetSYS_CLKFreq>
 800072c:	4601      	mov	r1, r0
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	0adb      	lsrs	r3, r3, #11
 8000734:	f003 0307 	and.w	r3, r3, #7
 8000738:	4a03      	ldr	r2, [pc, #12]	; (8000748 <MCAL_RCC_GetPCLK2Freq+0x24>)
 800073a:	5cd3      	ldrb	r3, [r2, r3]
 800073c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000740:	4618      	mov	r0, r3
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40021000 	.word	0x40021000
 8000748:	08000ecc 	.word	0x08000ecc

0800074c <MCAL_SPI_Init>:
* @retval 			-None
* Note				-Support for SPI Full Duplex Master/Slave only & NSS HW/SW
* 					-in case of master you have to configure pin and drive it
*/
void MCAL_SPI_Init (SPI_TypeDef *SPIx, SPI_Config* SPI_Config)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
	//Safety for register
	uint16_t tmpreg_CR1 = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	81fb      	strh	r3, [r7, #14]
	uint16_t tmpreg_CR2 = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	81bb      	strh	r3, [r7, #12]

	if		(SPIx == SPI1) 		{	RCC_SPI1_CLK_EN(); 	Global_SPI_Config[SPI1_INDEX] = SPI_Config;	}
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a3b      	ldr	r2, [pc, #236]	; (8000850 <MCAL_SPI_Init+0x104>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d109      	bne.n	800077a <MCAL_SPI_Init+0x2e>
 8000766:	4b3b      	ldr	r3, [pc, #236]	; (8000854 <MCAL_SPI_Init+0x108>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	4a3a      	ldr	r2, [pc, #232]	; (8000854 <MCAL_SPI_Init+0x108>)
 800076c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000770:	6193      	str	r3, [r2, #24]
 8000772:	4a39      	ldr	r2, [pc, #228]	; (8000858 <MCAL_SPI_Init+0x10c>)
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	e00c      	b.n	8000794 <MCAL_SPI_Init+0x48>
	else if	(SPIx == SPI2) 		{	RCC_SPI2_CLK_EN();	Global_SPI_Config[SPI2_INDEX] = SPI_Config;	}
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a37      	ldr	r2, [pc, #220]	; (800085c <MCAL_SPI_Init+0x110>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d108      	bne.n	8000794 <MCAL_SPI_Init+0x48>
 8000782:	4b34      	ldr	r3, [pc, #208]	; (8000854 <MCAL_SPI_Init+0x108>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a33      	ldr	r2, [pc, #204]	; (8000854 <MCAL_SPI_Init+0x108>)
 8000788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078c:	61d3      	str	r3, [r2, #28]
 800078e:	4a32      	ldr	r2, [pc, #200]	; (8000858 <MCAL_SPI_Init+0x10c>)
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	6053      	str	r3, [r2, #4]

	//Enable SPI CR1 Bit 6 SPE: SPI enable
	tmpreg_CR1 = (0x1U<<6);
 8000794:	2340      	movs	r3, #64	; 0x40
 8000796:	81fb      	strh	r3, [r7, #14]

	//Master or Slave
	tmpreg_CR1 |= SPI_Config->Device_Mode;
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	881a      	ldrh	r2, [r3, #0]
 800079c:	89fb      	ldrh	r3, [r7, #14]
 800079e:	4313      	orrs	r3, r2
 80007a0:	81fb      	strh	r3, [r7, #14]

	//SPI_Communication_Mode
	tmpreg_CR1 |= SPI_Config->Communication_Mode;
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	885a      	ldrh	r2, [r3, #2]
 80007a6:	89fb      	ldrh	r3, [r7, #14]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	81fb      	strh	r3, [r7, #14]

	//SPI_Frame_Format
	tmpreg_CR1 |= SPI_Config->Frame_Format;
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	889a      	ldrh	r2, [r3, #4]
 80007b0:	89fb      	ldrh	r3, [r7, #14]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	81fb      	strh	r3, [r7, #14]

	//SPI_DataSize
	tmpreg_CR1 |= SPI_Config->DataSize;
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	88da      	ldrh	r2, [r3, #6]
 80007ba:	89fb      	ldrh	r3, [r7, #14]
 80007bc:	4313      	orrs	r3, r2
 80007be:	81fb      	strh	r3, [r7, #14]

	//SPI_CLKPolarity
	tmpreg_CR1 |= SPI_Config->CLKPolarity;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	891a      	ldrh	r2, [r3, #8]
 80007c4:	89fb      	ldrh	r3, [r7, #14]
 80007c6:	4313      	orrs	r3, r2
 80007c8:	81fb      	strh	r3, [r7, #14]

	//SPI_CLKPhase
	tmpreg_CR1 |= SPI_Config->CLKPhase;
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	895a      	ldrh	r2, [r3, #10]
 80007ce:	89fb      	ldrh	r3, [r7, #14]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	81fb      	strh	r3, [r7, #14]

	//SPI_NSS
	if(SPI_Config->NSS == SPI_NSS_Hard_Master_SS_output_enable)
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	899b      	ldrh	r3, [r3, #12]
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d105      	bne.n	80007e8 <MCAL_SPI_Init+0x9c>
	{
		tmpreg_CR2 |= SPI_Config->NSS;
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	899a      	ldrh	r2, [r3, #12]
 80007e0:	89bb      	ldrh	r3, [r7, #12]
 80007e2:	4313      	orrs	r3, r2
 80007e4:	81bb      	strh	r3, [r7, #12]
 80007e6:	e004      	b.n	80007f2 <MCAL_SPI_Init+0xa6>
	{
		tmpreg_CR2 &= SPI_Config->NSS;
	}
	else
	{
		tmpreg_CR1 |= SPI_Config->NSS;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	899a      	ldrh	r2, [r3, #12]
 80007ec:	89fb      	ldrh	r3, [r7, #14]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	81fb      	strh	r3, [r7, #14]
	}

	//SPI_BAUDRATEPRESCALER
	tmpreg_CR1 |= SPI_Config->SPI_BAUDRATEPRESCALER;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	89da      	ldrh	r2, [r3, #14]
 80007f6:	89fb      	ldrh	r3, [r7, #14]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	81fb      	strh	r3, [r7, #14]

	//SPI_IRQ_
	if (SPI_Config->IRQ_Enable != SPI_IRQ_Enable_NONE)
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	8a1b      	ldrh	r3, [r3, #16]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d019      	beq.n	8000838 <MCAL_SPI_Init+0xec>
	{
		tmpreg_CR2 |= SPI_Config->IRQ_Enable;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	8a1a      	ldrh	r2, [r3, #16]
 8000808:	89bb      	ldrh	r3, [r7, #12]
 800080a:	4313      	orrs	r3, r2
 800080c:	81bb      	strh	r3, [r7, #12]
		if		(SPIx == SPI1) 		NVIC_IRQ35_SPI1_Enable;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <MCAL_SPI_Init+0x104>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d106      	bne.n	8000824 <MCAL_SPI_Init+0xd8>
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MCAL_SPI_Init+0x114>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a11      	ldr	r2, [pc, #68]	; (8000860 <MCAL_SPI_Init+0x114>)
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	6013      	str	r3, [r2, #0]
 8000822:	e009      	b.n	8000838 <MCAL_SPI_Init+0xec>
		else if	(SPIx == SPI2) 		NVIC_IRQ36_SPI2_Enable;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a0d      	ldr	r2, [pc, #52]	; (800085c <MCAL_SPI_Init+0x110>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d105      	bne.n	8000838 <MCAL_SPI_Init+0xec>
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MCAL_SPI_Init+0x114>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <MCAL_SPI_Init+0x114>)
 8000832:	f043 0310 	orr.w	r3, r3, #16
 8000836:	6013      	str	r3, [r2, #0]
	}

	SPIx->CR1 = tmpreg_CR1;
 8000838:	89fa      	ldrh	r2, [r7, #14]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = tmpreg_CR2;
 800083e:	89ba      	ldrh	r2, [r7, #12]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	605a      	str	r2, [r3, #4]
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40013000 	.word	0x40013000
 8000854:	40021000 	.word	0x40021000
 8000858:	2000001c 	.word	0x2000001c
 800085c:	40003800 	.word	0x40003800
 8000860:	e000e104 	.word	0xe000e104

08000864 <MCAL_SPI_GPIO_Set_Pins>:
* @param [in] 		-SPIx: where x can be (1..2 depending on device used)
* @retval 			-None
* Note				-Should enable the corresponding ALT & GPIO in RCC clock Also called after MCAL_SPI_Init()
*/
void MCAL_SPI_GPIO_Set_Pins (SPI_TypeDef *SPIx)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinConfig;
	if(SPIx == SPI1)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a73      	ldr	r2, [pc, #460]	; (8000a3c <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d169      	bne.n	8000948 <MCAL_SPI_GPIO_Set_Pins+0xe4>
	{
		if(Global_SPI_Config[SPI1_INDEX]->Device_Mode == SPI_Device_Mode_MASTER)
 8000874:	4b72      	ldr	r3, [pc, #456]	; (8000a40 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	2b04      	cmp	r3, #4
 800087c:	d134      	bne.n	80008e8 <MCAL_SPI_GPIO_Set_Pins+0x84>
		{
			//PA4 : SPI1_NSS
			switch(Global_SPI_Config[SPI1_INDEX]->NSS)
 800087e:	4b70      	ldr	r3, [pc, #448]	; (8000a40 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	899b      	ldrh	r3, [r3, #12]
 8000884:	2b04      	cmp	r3, #4
 8000886:	d10c      	bne.n	80008a2 <MCAL_SPI_GPIO_Set_Pins+0x3e>
				PinConfig.GPIO_PinNumber = GPIO_PIN_4;
				PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLO;
				MCAL_GPIO_Init(GPIOA, &PinConfig);
				break;
			case SPI_NSS_Hard_Master_SS_output_enable:
				PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 8000888:	2310      	movs	r3, #16
 800088a:	81bb      	strh	r3, [r7, #12]
				PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800088c:	2306      	movs	r3, #6
 800088e:	73bb      	strb	r3, [r7, #14]
				PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000890:	2301      	movs	r3, #1
 8000892:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4619      	mov	r1, r3
 800089a:	486a      	ldr	r0, [pc, #424]	; (8000a44 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800089c:	f7ff fe91 	bl	80005c2 <MCAL_GPIO_Init>
				break;
 80008a0:	bf00      	nop
			}

			//PA5 : SPI1 SCK
			// Master => Alternate function push-pull
			PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 80008a2:	2320      	movs	r3, #32
 80008a4:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80008a6:	2306      	movs	r3, #6
 80008a8:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80008aa:	2301      	movs	r3, #1
 80008ac:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	4619      	mov	r1, r3
 80008b4:	4863      	ldr	r0, [pc, #396]	; (8000a44 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80008b6:	f7ff fe84 	bl	80005c2 <MCAL_GPIO_Init>

			//PA6 : SPI1 MISO
			// Full duplex / master => input floating
			PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 80008ba:	2340      	movs	r3, #64	; 0x40
 80008bc:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80008be:	2301      	movs	r3, #1
 80008c0:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	4619      	mov	r1, r3
 80008c8:	485e      	ldr	r0, [pc, #376]	; (8000a44 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80008ca:	f7ff fe7a 	bl	80005c2 <MCAL_GPIO_Init>

			//PA7 : SPI1 MOSI
			// Full duplex / Master => Alternate function push-pull
			PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 80008ce:	2380      	movs	r3, #128	; 0x80
 80008d0:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80008d2:	2306      	movs	r3, #6
 80008d4:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80008d6:	2301      	movs	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	4619      	mov	r1, r3
 80008e0:	4858      	ldr	r0, [pc, #352]	; (8000a44 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80008e2:	f7ff fe6e 	bl	80005c2 <MCAL_GPIO_Init>
			PinConfig.GPIO_PinNumber = GPIO_PIN_15;
			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLO;
			MCAL_GPIO_Init(GPIOB, &PinConfig);
		}
	}
}
 80008e6:	e0a4      	b.n	8000a32 <MCAL_SPI_GPIO_Set_Pins+0x1ce>
			if (Global_SPI_Config[SPI1_INDEX]->NSS == SPI_NSS_Hard_Slave)
 80008e8:	4b55      	ldr	r3, [pc, #340]	; (8000a40 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	899b      	ldrh	r3, [r3, #12]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d109      	bne.n	8000906 <MCAL_SPI_GPIO_Set_Pins+0xa2>
				PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 80008f2:	2310      	movs	r3, #16
 80008f4:	81bb      	strh	r3, [r7, #12]
				PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80008f6:	2301      	movs	r3, #1
 80008f8:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinConfig);
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	4619      	mov	r1, r3
 8000900:	4850      	ldr	r0, [pc, #320]	; (8000a44 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000902:	f7ff fe5e 	bl	80005c2 <MCAL_GPIO_Init>
			PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000906:	2320      	movs	r3, #32
 8000908:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800090a:	2301      	movs	r3, #1
 800090c:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	4619      	mov	r1, r3
 8000914:	484b      	ldr	r0, [pc, #300]	; (8000a44 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000916:	f7ff fe54 	bl	80005c2 <MCAL_GPIO_Init>
			PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 800091a:	2340      	movs	r3, #64	; 0x40
 800091c:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800091e:	2306      	movs	r3, #6
 8000920:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000922:	2301      	movs	r3, #1
 8000924:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4619      	mov	r1, r3
 800092c:	4845      	ldr	r0, [pc, #276]	; (8000a44 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800092e:	f7ff fe48 	bl	80005c2 <MCAL_GPIO_Init>
			PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000932:	2380      	movs	r3, #128	; 0x80
 8000934:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000936:	2301      	movs	r3, #1
 8000938:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	4619      	mov	r1, r3
 8000940:	4840      	ldr	r0, [pc, #256]	; (8000a44 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000942:	f7ff fe3e 	bl	80005c2 <MCAL_GPIO_Init>
}
 8000946:	e074      	b.n	8000a32 <MCAL_SPI_GPIO_Set_Pins+0x1ce>
	else if(SPIx == SPI2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a3f      	ldr	r2, [pc, #252]	; (8000a48 <MCAL_SPI_GPIO_Set_Pins+0x1e4>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d170      	bne.n	8000a32 <MCAL_SPI_GPIO_Set_Pins+0x1ce>
		if(Global_SPI_Config[SPI2_INDEX]->Device_Mode == SPI_Device_Mode_MASTER)
 8000950:	4b3b      	ldr	r3, [pc, #236]	; (8000a40 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	2b04      	cmp	r3, #4
 8000958:	d138      	bne.n	80009cc <MCAL_SPI_GPIO_Set_Pins+0x168>
			switch(Global_SPI_Config[SPI2_INDEX]->NSS)
 800095a:	4b39      	ldr	r3, [pc, #228]	; (8000a40 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	899b      	ldrh	r3, [r3, #12]
 8000960:	2b04      	cmp	r3, #4
 8000962:	d10d      	bne.n	8000980 <MCAL_SPI_GPIO_Set_Pins+0x11c>
				PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000968:	81bb      	strh	r3, [r7, #12]
				PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800096a:	2306      	movs	r3, #6
 800096c:	73bb      	strb	r3, [r7, #14]
				PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 800096e:	2301      	movs	r3, #1
 8000970:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	4619      	mov	r1, r3
 8000978:	4834      	ldr	r0, [pc, #208]	; (8000a4c <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 800097a:	f7ff fe22 	bl	80005c2 <MCAL_GPIO_Init>
				break;
 800097e:	bf00      	nop
			PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000984:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000986:	2306      	movs	r3, #6
 8000988:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 800098a:	2301      	movs	r3, #1
 800098c:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	4619      	mov	r1, r3
 8000994:	482d      	ldr	r0, [pc, #180]	; (8000a4c <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000996:	f7ff fe14 	bl	80005c2 <MCAL_GPIO_Init>
			PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 800099a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800099e:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80009a0:	2301      	movs	r3, #1
 80009a2:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4619      	mov	r1, r3
 80009aa:	4828      	ldr	r0, [pc, #160]	; (8000a4c <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80009ac:	f7ff fe09 	bl	80005c2 <MCAL_GPIO_Init>
			PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 80009b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009b4:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80009b6:	2306      	movs	r3, #6
 80009b8:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009ba:	2301      	movs	r3, #1
 80009bc:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	4619      	mov	r1, r3
 80009c4:	4821      	ldr	r0, [pc, #132]	; (8000a4c <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80009c6:	f7ff fdfc 	bl	80005c2 <MCAL_GPIO_Init>
}
 80009ca:	e032      	b.n	8000a32 <MCAL_SPI_GPIO_Set_Pins+0x1ce>
			if (Global_SPI_Config[SPI2_INDEX]->NSS == SPI_NSS_Hard_Slave)
 80009cc:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	899b      	ldrh	r3, [r3, #12]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d10a      	bne.n	80009ec <MCAL_SPI_GPIO_Set_Pins+0x188>
				PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 80009d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009da:	81bb      	strh	r3, [r7, #12]
				PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80009dc:	2301      	movs	r3, #1
 80009de:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &PinConfig);
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	4619      	mov	r1, r3
 80009e6:	4819      	ldr	r0, [pc, #100]	; (8000a4c <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80009e8:	f7ff fdeb 	bl	80005c2 <MCAL_GPIO_Init>
			PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80009ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f0:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80009f2:	2301      	movs	r3, #1
 80009f4:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 80009f6:	f107 030c 	add.w	r3, r7, #12
 80009fa:	4619      	mov	r1, r3
 80009fc:	4813      	ldr	r0, [pc, #76]	; (8000a4c <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80009fe:	f7ff fde0 	bl	80005c2 <MCAL_GPIO_Init>
			PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 8000a02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a06:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000a08:	2306      	movs	r3, #6
 8000a0a:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	4619      	mov	r1, r3
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000a18:	f7ff fdd3 	bl	80005c2 <MCAL_GPIO_Init>
			PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 8000a1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a20:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000a22:	2301      	movs	r3, #1
 8000a24:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4807      	ldr	r0, [pc, #28]	; (8000a4c <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000a2e:	f7ff fdc8 	bl	80005c2 <MCAL_GPIO_Init>
}
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40013000 	.word	0x40013000
 8000a40:	2000001c 	.word	0x2000001c
 8000a44:	40010800 	.word	0x40010800
 8000a48:	40003800 	.word	0x40003800
 8000a4c:	40010c00 	.word	0x40010c00

08000a50 <MCAL_SPI_TX_RX>:
* @param [in] 		-PollingEn Enable/Disable polling
* @retval 			-None
* Note				-None
*/
void MCAL_SPI_TX_RX (SPI_TypeDef* SPIx, uint16_t* pTxBuffer, enum PollingMechanism PollingEn)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	71fb      	strb	r3, [r7, #7]
	if (PollingEn == Pollingenable)		while(!((SPIx->SR) & SPI_SR_TXE));
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d106      	bne.n	8000a72 <MCAL_SPI_TX_RX+0x22>
 8000a64:	bf00      	nop
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d0f9      	beq.n	8000a66 <MCAL_SPI_TX_RX+0x16>
	SPIx->DR = *pTxBuffer;
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	60da      	str	r2, [r3, #12]

	if (PollingEn == Pollingenable)		while(!((SPIx->SR) & SPI_SR_RXNE));
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d106      	bne.n	8000a90 <MCAL_SPI_TX_RX+0x40>
 8000a82:	bf00      	nop
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d0f9      	beq.n	8000a84 <MCAL_SPI_TX_RX+0x34>
	*pTxBuffer = SPIx->DR;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	801a      	strh	r2, [r3, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <SPI1_IRQHandler>:


//IRQ
void SPI1_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	irq_src.TXE = 	( (SPI1->SR & (1<<1)) >> 1);
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <SPI1_IRQHandler+0x54>)
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	085b      	lsrs	r3, r3, #1
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	793b      	ldrb	r3, [r7, #4]
 8000ab8:	f362 0300 	bfi	r3, r2, #0, #1
 8000abc:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = 	( (SPI1->SR & (1<<0)) >> 0);
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <SPI1_IRQHandler+0x54>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	793b      	ldrb	r3, [r7, #4]
 8000aca:	f362 0341 	bfi	r3, r2, #1, #1
 8000ace:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = 	( (SPI1->SR & (1<<4)) >> 4);
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <SPI1_IRQHandler+0x54>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	091b      	lsrs	r3, r3, #4
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	793b      	ldrb	r3, [r7, #4]
 8000ade:	f362 0382 	bfi	r3, r2, #2, #1
 8000ae2:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI1_INDEX]->P_IRQ_Callback(irq_src);
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <SPI1_IRQHandler+0x58>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	7938      	ldrb	r0, [r7, #4]
 8000aec:	4798      	blx	r3
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40013000 	.word	0x40013000
 8000afc:	2000001c 	.word	0x2000001c

08000b00 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	irq_src.TXE = 	( (SPI2->SR & (1<<1)) >> 1);
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <SPI2_IRQHandler+0x54>)
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	085b      	lsrs	r3, r3, #1
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	793b      	ldrb	r3, [r7, #4]
 8000b14:	f362 0300 	bfi	r3, r2, #0, #1
 8000b18:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = 	( (SPI2->SR & (1<<0)) >> 0);
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <SPI2_IRQHandler+0x54>)
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	793b      	ldrb	r3, [r7, #4]
 8000b26:	f362 0341 	bfi	r3, r2, #1, #1
 8000b2a:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = 	( (SPI2->SR & (1<<4)) >> 4);
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <SPI2_IRQHandler+0x54>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	091b      	lsrs	r3, r3, #4
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	793b      	ldrb	r3, [r7, #4]
 8000b3a:	f362 0382 	bfi	r3, r2, #2, #1
 8000b3e:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_INDEX]->P_IRQ_Callback(irq_src);
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <SPI2_IRQHandler+0x58>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	7938      	ldrb	r0, [r7, #4]
 8000b48:	4798      	blx	r3
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40003800 	.word	0x40003800
 8000b58:	2000001c 	.word	0x2000001c

08000b5c <MCAL_UART_Init>:
* @param [in] 		-UART_Config: All UART Configuration EXTI_PinConfig_t
* @retval 			-None
* Note				-Support for Now Asynch. mode & clock 8 MHZ
*/
void MCAL_UART_Init (USART_TypeDef* USARTx, UART_Config* UART_Config)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]

	uint32_t pclk, BRR;

	// enable the clock for given USART peripheral
	if		(USARTx == USART1) 		{	RCC_USART1_CLK_EN(); 	Global_UART_Config[0] = UART_Config;	}
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a59      	ldr	r2, [pc, #356]	; (8000cd0 <MCAL_UART_Init+0x174>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d109      	bne.n	8000b82 <MCAL_UART_Init+0x26>
 8000b6e:	4b59      	ldr	r3, [pc, #356]	; (8000cd4 <MCAL_UART_Init+0x178>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	4a58      	ldr	r2, [pc, #352]	; (8000cd4 <MCAL_UART_Init+0x178>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b78:	6193      	str	r3, [r2, #24]
 8000b7a:	4a57      	ldr	r2, [pc, #348]	; (8000cd8 <MCAL_UART_Init+0x17c>)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	6013      	str	r3, [r2, #0]
 8000b80:	e01a      	b.n	8000bb8 <MCAL_UART_Init+0x5c>
	else if	(USARTx == USART2) 		{	RCC_USART2_CLK_EN();	Global_UART_Config[1] = UART_Config;	}
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a55      	ldr	r2, [pc, #340]	; (8000cdc <MCAL_UART_Init+0x180>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d109      	bne.n	8000b9e <MCAL_UART_Init+0x42>
 8000b8a:	4b52      	ldr	r3, [pc, #328]	; (8000cd4 <MCAL_UART_Init+0x178>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	4a51      	ldr	r2, [pc, #324]	; (8000cd4 <MCAL_UART_Init+0x178>)
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b94:	61d3      	str	r3, [r2, #28]
 8000b96:	4a50      	ldr	r2, [pc, #320]	; (8000cd8 <MCAL_UART_Init+0x17c>)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	6053      	str	r3, [r2, #4]
 8000b9c:	e00c      	b.n	8000bb8 <MCAL_UART_Init+0x5c>
	else if	(USARTx == USART3) 		{	RCC_USART3_CLK_EN();	Global_UART_Config[2] = UART_Config;	}
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a4f      	ldr	r2, [pc, #316]	; (8000ce0 <MCAL_UART_Init+0x184>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d108      	bne.n	8000bb8 <MCAL_UART_Init+0x5c>
 8000ba6:	4b4b      	ldr	r3, [pc, #300]	; (8000cd4 <MCAL_UART_Init+0x178>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	4a4a      	ldr	r2, [pc, #296]	; (8000cd4 <MCAL_UART_Init+0x178>)
 8000bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb0:	61d3      	str	r3, [r2, #28]
 8000bb2:	4a49      	ldr	r2, [pc, #292]	; (8000cd8 <MCAL_UART_Init+0x17c>)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	6093      	str	r3, [r2, #8]

	//Enable USART Module
	//Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	60da      	str	r2, [r3, #12]

	//Enable USART TX & RX according to the UART_Config mode
	//USARTx CR1 Bit 3 TE: Transmitter enable & Bit 3 TE: Transmitter enable
	USARTx->CR1 |= UART_Config->USART_Mode;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	683a      	ldr	r2, [r7, #0]
 8000bca:	7812      	ldrb	r2, [r2, #0]
 8000bcc:	431a      	orrs	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	60da      	str	r2, [r3, #12]

	//Payload Length
	//USARTx CR1 Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->Payload_length;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	683a      	ldr	r2, [r7, #0]
 8000bd8:	7a12      	ldrb	r2, [r2, #8]
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	60da      	str	r2, [r3, #12]

	//Parity
	//USARTx CR1 Bit 12 M: Word length & Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	683a      	ldr	r2, [r7, #0]
 8000be6:	7a52      	ldrb	r2, [r2, #9]
 8000be8:	431a      	orrs	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	60da      	str	r2, [r3, #12]

	//STOP bits
	//USARTx CR2 Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_Config->StopBits;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	7a92      	ldrb	r2, [r2, #10]
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	611a      	str	r2, [r3, #16]

	//USART hardware Flow Control
	//USARTx CR3 Bit 9 CTSE: CTS enable & Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HwFlowCtl;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	683a      	ldr	r2, [r7, #0]
 8000c02:	7ad2      	ldrb	r2, [r2, #11]
 8000c04:	431a      	orrs	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	615a      	str	r2, [r3, #20]

	//Configuration of BRR(BaudRate register)
	//PCLK1 for USART2,3
	//PCLK2 for USART1
	if (USARTx == USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a30      	ldr	r2, [pc, #192]	; (8000cd0 <MCAL_UART_Init+0x174>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d103      	bne.n	8000c1a <MCAL_UART_Init+0xbe>
	{
		pclk = MCAL_RCC_GetPCLK2Freq();
 8000c12:	f7ff fd87 	bl	8000724 <MCAL_RCC_GetPCLK2Freq>
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	e002      	b.n	8000c20 <MCAL_UART_Init+0xc4>
	}
	else
	{
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000c1a:	f7ff fd6f 	bl	80006fc <MCAL_RCC_GetPCLK1Freq>
 8000c1e:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BoudRate);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	011b      	lsls	r3, r3, #4
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2c:	0119      	lsls	r1, r3, #4
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	4613      	mov	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	4413      	add	r3, r2
 8000c36:	009a      	lsls	r2, r3, #2
 8000c38:	441a      	add	r2, r3
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c50:	2064      	movs	r0, #100	; 0x64
 8000c52:	fb00 f303 	mul.w	r3, r0, r3
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	011b      	lsls	r3, r3, #4
 8000c5a:	4a22      	ldr	r2, [pc, #136]	; (8000ce4 <MCAL_UART_Init+0x188>)
 8000c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c60:	095b      	lsrs	r3, r3, #5
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	430b      	orrs	r3, r1
 8000c68:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	68ba      	ldr	r2, [r7, #8]
 8000c6e:	609a      	str	r2, [r3, #8]

	//Enable / Disable Interrupt
	//USART_CR1
	if (UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	7b1b      	ldrb	r3, [r3, #12]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d026      	beq.n	8000cc6 <MCAL_UART_Init+0x16a>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	7b12      	ldrb	r2, [r2, #12]
 8000c80:	431a      	orrs	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	60da      	str	r2, [r3, #12]

		//Enable NVIC for USARTx IRQ
		if 		(USARTx == USART1) 		NVIC_IRQ37_USART1_Enable;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a11      	ldr	r2, [pc, #68]	; (8000cd0 <MCAL_UART_Init+0x174>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d106      	bne.n	8000c9c <MCAL_UART_Init+0x140>
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MCAL_UART_Init+0x18c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a15      	ldr	r2, [pc, #84]	; (8000ce8 <MCAL_UART_Init+0x18c>)
 8000c94:	f043 0320 	orr.w	r3, r3, #32
 8000c98:	6013      	str	r3, [r2, #0]
		else if (USARTx == USART2)		NVIC_IRQ38_USART2_Enable;
		else if (USARTx == USART3) 		NVIC_IRQ39_USART3_Enable;
	}
}
 8000c9a:	e014      	b.n	8000cc6 <MCAL_UART_Init+0x16a>
		else if (USARTx == USART2)		NVIC_IRQ38_USART2_Enable;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a0f      	ldr	r2, [pc, #60]	; (8000cdc <MCAL_UART_Init+0x180>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d106      	bne.n	8000cb2 <MCAL_UART_Init+0x156>
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <MCAL_UART_Init+0x18c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0f      	ldr	r2, [pc, #60]	; (8000ce8 <MCAL_UART_Init+0x18c>)
 8000caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	e009      	b.n	8000cc6 <MCAL_UART_Init+0x16a>
		else if (USARTx == USART3) 		NVIC_IRQ39_USART3_Enable;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <MCAL_UART_Init+0x184>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d105      	bne.n	8000cc6 <MCAL_UART_Init+0x16a>
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <MCAL_UART_Init+0x18c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <MCAL_UART_Init+0x18c>)
 8000cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc4:	6013      	str	r3, [r2, #0]
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40013800 	.word	0x40013800
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	20000024 	.word	0x20000024
 8000cdc:	40004400 	.word	0x40004400
 8000ce0:	40004800 	.word	0x40004800
 8000ce4:	51eb851f 	.word	0x51eb851f
 8000ce8:	e000e104 	.word	0xe000e104

08000cec <MCAL_UART_SendData>:
* 					the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
* 					because it is replaced by the parity.
* 					When receiving with the parity enabled, the value read in the MSB bit is the received parity bit
*/
void MCAL_UART_SendData (USART_TypeDef* USARTx, uint16_t* pTxBuffer, enum Polling_mechanism PollingEn)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	71fb      	strb	r3, [r7, #7]
	UART_Config* UART_Config = NULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
	if		(USARTx == USART1) 		UART_Config = Global_UART_Config[0];
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <MCAL_UART_SendData+0x68>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d103      	bne.n	8000d0e <MCAL_UART_SendData+0x22>
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MCAL_UART_SendData+0x6c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	e00e      	b.n	8000d2c <MCAL_UART_SendData+0x40>
	else if	(USARTx == USART2) 		UART_Config = Global_UART_Config[1];
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <MCAL_UART_SendData+0x70>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d103      	bne.n	8000d1e <MCAL_UART_SendData+0x32>
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <MCAL_UART_SendData+0x6c>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	e006      	b.n	8000d2c <MCAL_UART_SendData+0x40>
	else if	(USARTx == USART3) 		UART_Config = Global_UART_Config[2];
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <MCAL_UART_SendData+0x74>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d102      	bne.n	8000d2c <MCAL_UART_SendData+0x40>
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MCAL_UART_SendData+0x6c>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	617b      	str	r3, [r7, #20]

	// Wait until TXE flag is set in the SR
	if(PollingEn == enable)	while ( !(USARTx->SR & 1<<7) );
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d106      	bne.n	8000d40 <MCAL_UART_SendData+0x54>
 8000d32:	bf00      	nop
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d0f9      	beq.n	8000d34 <MCAL_UART_SendData+0x48>
	if(UART_Config->Payload_length == UART_Payload_Length_9B)
	{
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
	}else
	{
		USARTx->DR = (*pTxBuffer & (uint16_t)0xFF);
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	605a      	str	r2, [r3, #4]
	}
}
 8000d4a:	bf00      	nop
 8000d4c:	371c      	adds	r7, #28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	40013800 	.word	0x40013800
 8000d58:	20000024 	.word	0x20000024
 8000d5c:	40004400 	.word	0x40004400
 8000d60:	40004800 	.word	0x40004800

08000d64 <MCAL_UART_GPIO_Set_Pins>:
* @param [in] 		-USARTx: where x can be (1..3 depending on device used)
* @retval 			-None
* Note				-Should enable the corresponding ALT & GPIO in RCC clock Also called after MCAL_UART_Init()
*/
void MCAL_UART_GPIO_Set_Pins (USART_TypeDef* USARTx)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinConfig;
	if (USARTx == USART1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a2b      	ldr	r2, [pc, #172]	; (8000e1c <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d118      	bne.n	8000da6 <MCAL_UART_GPIO_Set_Pins+0x42>
	{
		//PA9 TX
		PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 8000d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d78:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000d7a:	2306      	movs	r3, #6
 8000d7c:	73bb      	strb	r3, [r7, #14]
		PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	4619      	mov	r1, r3
 8000d88:	4825      	ldr	r0, [pc, #148]	; (8000e20 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000d8a:	f7ff fc1a 	bl	80005c2 <MCAL_GPIO_Init>

		//PA10 Rx
		PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 8000d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d92:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000d94:	2308      	movs	r3, #8
 8000d96:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4820      	ldr	r0, [pc, #128]	; (8000e20 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000da0:	f7ff fc0f 	bl	80005c2 <MCAL_GPIO_Init>
			PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &PinConfig);
		}
	}

}
 8000da4:	e036      	b.n	8000e14 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if (USARTx == USART2)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a1e      	ldr	r2, [pc, #120]	; (8000e24 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d116      	bne.n	8000ddc <MCAL_UART_GPIO_Set_Pins+0x78>
		PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 8000dae:	2304      	movs	r3, #4
 8000db0:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000db2:	2306      	movs	r3, #6
 8000db4:	73bb      	strb	r3, [r7, #14]
		PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000db6:	2301      	movs	r3, #1
 8000db8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000dba:	f107 030c 	add.w	r3, r7, #12
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4817      	ldr	r0, [pc, #92]	; (8000e20 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000dc2:	f7ff fbfe 	bl	80005c2 <MCAL_GPIO_Init>
		PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 8000dc6:	2308      	movs	r3, #8
 8000dc8:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000dca:	2308      	movs	r3, #8
 8000dcc:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4812      	ldr	r0, [pc, #72]	; (8000e20 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000dd6:	f7ff fbf4 	bl	80005c2 <MCAL_GPIO_Init>
}
 8000dda:	e01b      	b.n	8000e14 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if (USARTx == USART3)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d117      	bne.n	8000e14 <MCAL_UART_GPIO_Set_Pins+0xb0>
		PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 8000de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000de8:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000dea:	2306      	movs	r3, #6
 8000dec:	73bb      	strb	r3, [r7, #14]
		PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000dee:	2301      	movs	r3, #1
 8000df0:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	4619      	mov	r1, r3
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000dfa:	f7ff fbe2 	bl	80005c2 <MCAL_GPIO_Init>
		PinConfig.GPIO_PinNumber = GPIO_PIN_11;
 8000dfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e02:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000e04:	2308      	movs	r3, #8
 8000e06:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4807      	ldr	r0, [pc, #28]	; (8000e2c <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000e10:	f7ff fbd7 	bl	80005c2 <MCAL_GPIO_Init>
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40013800 	.word	0x40013800
 8000e20:	40010800 	.word	0x40010800
 8000e24:	40004400 	.word	0x40004400
 8000e28:	40004800 	.word	0x40004800
 8000e2c:	40010c00 	.word	0x40010c00

08000e30 <USART1_IRQHandler>:


//IRQ

void USART1_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	Global_UART_Config[0]->P_IRQ_CallBack();
 8000e34:	4b02      	ldr	r3, [pc, #8]	; (8000e40 <USART1_IRQHandler+0x10>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	4798      	blx	r3
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000024 	.word	0x20000024

08000e44 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	Global_UART_Config[1]->P_IRQ_CallBack();
 8000e48:	4b02      	ldr	r3, [pc, #8]	; (8000e54 <USART2_IRQHandler+0x10>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	4798      	blx	r3
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000024 	.word	0x20000024

08000e58 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	Global_UART_Config[2]->P_IRQ_CallBack();
 8000e5c:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <USART3_IRQHandler+0x10>)
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	691b      	ldr	r3, [r3, #16]
 8000e62:	4798      	blx	r3
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000024 	.word	0x20000024

08000e6c <__libc_init_array>:
 8000e6c:	b570      	push	{r4, r5, r6, lr}
 8000e6e:	2500      	movs	r5, #0
 8000e70:	4e0c      	ldr	r6, [pc, #48]	; (8000ea4 <__libc_init_array+0x38>)
 8000e72:	4c0d      	ldr	r4, [pc, #52]	; (8000ea8 <__libc_init_array+0x3c>)
 8000e74:	1ba4      	subs	r4, r4, r6
 8000e76:	10a4      	asrs	r4, r4, #2
 8000e78:	42a5      	cmp	r5, r4
 8000e7a:	d109      	bne.n	8000e90 <__libc_init_array+0x24>
 8000e7c:	f000 f81a 	bl	8000eb4 <_init>
 8000e80:	2500      	movs	r5, #0
 8000e82:	4e0a      	ldr	r6, [pc, #40]	; (8000eac <__libc_init_array+0x40>)
 8000e84:	4c0a      	ldr	r4, [pc, #40]	; (8000eb0 <__libc_init_array+0x44>)
 8000e86:	1ba4      	subs	r4, r4, r6
 8000e88:	10a4      	asrs	r4, r4, #2
 8000e8a:	42a5      	cmp	r5, r4
 8000e8c:	d105      	bne.n	8000e9a <__libc_init_array+0x2e>
 8000e8e:	bd70      	pop	{r4, r5, r6, pc}
 8000e90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e94:	4798      	blx	r3
 8000e96:	3501      	adds	r5, #1
 8000e98:	e7ee      	b.n	8000e78 <__libc_init_array+0xc>
 8000e9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e9e:	4798      	blx	r3
 8000ea0:	3501      	adds	r5, #1
 8000ea2:	e7f2      	b.n	8000e8a <__libc_init_array+0x1e>
 8000ea4:	08000ed4 	.word	0x08000ed4
 8000ea8:	08000ed4 	.word	0x08000ed4
 8000eac:	08000ed4 	.word	0x08000ed4
 8000eb0:	08000ed8 	.word	0x08000ed8

08000eb4 <_init>:
 8000eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb6:	bf00      	nop
 8000eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eba:	bc08      	pop	{r3}
 8000ebc:	469e      	mov	lr, r3
 8000ebe:	4770      	bx	lr

08000ec0 <_fini>:
 8000ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec2:	bf00      	nop
 8000ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ec6:	bc08      	pop	{r3}
 8000ec8:	469e      	mov	lr, r3
 8000eca:	4770      	bx	lr
