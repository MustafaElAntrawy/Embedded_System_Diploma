
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009ac  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000adc  08000adc  00010adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ae4  08000ae4  00010aec  2**0
                  CONTENTS
  4 .ARM          00000000  08000ae4  08000ae4  00010aec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ae4  08000aec  00010aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ae4  08000ae4  00010ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ae8  08000ae8  00010ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000aec  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000aec  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010aec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004067  00000000  00000000  00010b15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009ae  00000000  00000000  00014b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a54  00000000  00000000  0001552a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001d0  00000000  00000000  00015f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  00016150  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000ee9  00000000  00000000  000162c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002406  00000000  00000000  000171b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a7da  00000000  00000000  000195b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00023d91  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000590  00000000  00000000  00023e0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ac4 	.word	0x08000ac4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ac4 	.word	0x08000ac4

08000170 <clock_init>:
#include "keypad.h"



void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Clock Enable
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <UART_IRQ_Callback>:
unsigned char ch;
void UART_IRQ_Callback(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	MCAL_UART_ReceiveData(USART1, &ch, disable);
 80001a8:	2201      	movs	r2, #1
 80001aa:	4905      	ldr	r1, [pc, #20]	; (80001c0 <UART_IRQ_Callback+0x1c>)
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <UART_IRQ_Callback+0x20>)
 80001ae:	f000 fb95 	bl	80008dc <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, &ch, enable);
 80001b2:	2200      	movs	r2, #0
 80001b4:	4902      	ldr	r1, [pc, #8]	; (80001c0 <UART_IRQ_Callback+0x1c>)
 80001b6:	4803      	ldr	r0, [pc, #12]	; (80001c4 <UART_IRQ_Callback+0x20>)
 80001b8:	f000 fb54 	bl	8000864 <MCAL_UART_SendData>
}
 80001bc:	bf00      	nop
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000028 	.word	0x20000028
 80001c4:	40013800 	.word	0x40013800

080001c8 <main>:



int main()
{ 
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
	UART_Config uartCFG;
	clock_init();
 80001ce:	f7ff ffcf 	bl	8000170 <clock_init>

	uartCFG.BoudRate = UART_BaudRate_115200;
 80001d2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001d6:	60bb      	str	r3, [r7, #8]
	uartCFG.HwFlowCtl = UART_HwFlowCtl_NONE;
 80001d8:	2300      	movs	r3, #0
 80001da:	73fb      	strb	r3, [r7, #15]
	uartCFG.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 80001dc:	2320      	movs	r3, #32
 80001de:	743b      	strb	r3, [r7, #16]
	uartCFG.P_IRQ_CallBack = UART_IRQ_Callback;
 80001e0:	4b09      	ldr	r3, [pc, #36]	; (8000208 <main+0x40>)
 80001e2:	617b      	str	r3, [r7, #20]
	uartCFG.Parity = UART_Parity__NONE;
 80001e4:	2300      	movs	r3, #0
 80001e6:	737b      	strb	r3, [r7, #13]
	uartCFG.Payload_length = UART_Payload_Length_8B;
 80001e8:	2300      	movs	r3, #0
 80001ea:	733b      	strb	r3, [r7, #12]
	uartCFG.StopBits = UART_StopBits__1;
 80001ec:	2300      	movs	r3, #0
 80001ee:	73bb      	strb	r3, [r7, #14]
	uartCFG.USART_Mode = UART_Mode_Tx_Rx;
 80001f0:	230c      	movs	r3, #12
 80001f2:	713b      	strb	r3, [r7, #4]

	MCAL_UART_Init(USART1, &uartCFG);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	4619      	mov	r1, r3
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <main+0x44>)
 80001fa:	f000 fa6b 	bl	80006d4 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 80001fe:	4803      	ldr	r0, [pc, #12]	; (800020c <main+0x44>)
 8000200:	f000 fbb8 	bl	8000974 <MCAL_UART_GPIO_Set_Pins>

	while (1){
 8000204:	e7fe      	b.n	8000204 <main+0x3c>
 8000206:	bf00      	nop
 8000208:	080001a5 	.word	0x080001a5
 800020c:	40013800 	.word	0x40013800

08000210 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000210:	480d      	ldr	r0, [pc, #52]	; (8000248 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000212:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000214:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000218:	480c      	ldr	r0, [pc, #48]	; (800024c <LoopForever+0x6>)
  ldr r1, =_edata
 800021a:	490d      	ldr	r1, [pc, #52]	; (8000250 <LoopForever+0xa>)
  ldr r2, =_sidata
 800021c:	4a0d      	ldr	r2, [pc, #52]	; (8000254 <LoopForever+0xe>)
  movs r3, #0
 800021e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000220:	e002      	b.n	8000228 <LoopCopyDataInit>

08000222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000226:	3304      	adds	r3, #4

08000228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800022c:	d3f9      	bcc.n	8000222 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800022e:	4a0a      	ldr	r2, [pc, #40]	; (8000258 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000230:	4c0a      	ldr	r4, [pc, #40]	; (800025c <LoopForever+0x16>)
  movs r3, #0
 8000232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000234:	e001      	b.n	800023a <LoopFillZerobss>

08000236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000238:	3204      	adds	r2, #4

0800023a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800023c:	d3fb      	bcc.n	8000236 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800023e:	f000 fc1d 	bl	8000a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000242:	f7ff ffc1 	bl	80001c8 <main>

08000246 <LoopForever>:

LoopForever:
    b LoopForever
 8000246:	e7fe      	b.n	8000246 <LoopForever>
  ldr   r0, =_estack
 8000248:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800024c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000250:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000254:	08000aec 	.word	0x08000aec
  ldr r2, =_sbss
 8000258:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800025c:	20000068 	.word	0x20000068

08000260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000260:	e7fe      	b.n	8000260 <ADC1_2_IRQHandler>
	...

08000264 <EXTI0_IRQHandler>:

//=================================================================
//ISR Functions:
//=================================================================
void EXTI0_IRQHandler()
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	//Cleared by writing a '1' into the bit -Pending register (EXTI_PR)
	EXTI->PR |= 1 << 0;
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <EXTI0_IRQHandler+0x1c>)
 800026a:	695b      	ldr	r3, [r3, #20]
 800026c:	4a04      	ldr	r2, [pc, #16]	; (8000280 <EXTI0_IRQHandler+0x1c>)
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6153      	str	r3, [r2, #20]
	//Callback
	GP_IRQ_CallBack[0]();
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <EXTI0_IRQHandler+0x20>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4798      	blx	r3

}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40010400 	.word	0x40010400
 8000284:	2000002c 	.word	0x2000002c

08000288 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler()
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1 << 1;
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <EXTI1_IRQHandler+0x1c>)
 800028e:	695b      	ldr	r3, [r3, #20]
 8000290:	4a04      	ldr	r2, [pc, #16]	; (80002a4 <EXTI1_IRQHandler+0x1c>)
 8000292:	f043 0302 	orr.w	r3, r3, #2
 8000296:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 8000298:	4b03      	ldr	r3, [pc, #12]	; (80002a8 <EXTI1_IRQHandler+0x20>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	4798      	blx	r3
}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40010400 	.word	0x40010400
 80002a8:	2000002c 	.word	0x2000002c

080002ac <EXTI2_IRQHandler>:
void EXTI2_IRQHandler()
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	EXTI->PR |= 1 << 2;
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <EXTI2_IRQHandler+0x1c>)
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <EXTI2_IRQHandler+0x1c>)
 80002b6:	f043 0304 	orr.w	r3, r3, #4
 80002ba:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <EXTI2_IRQHandler+0x20>)
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	4798      	blx	r3
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40010400 	.word	0x40010400
 80002cc:	2000002c 	.word	0x2000002c

080002d0 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler()
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	EXTI->PR |= 1 << 3;
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <EXTI3_IRQHandler+0x1c>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a04      	ldr	r2, [pc, #16]	; (80002ec <EXTI3_IRQHandler+0x1c>)
 80002da:	f043 0308 	orr.w	r3, r3, #8
 80002de:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 80002e0:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <EXTI3_IRQHandler+0x20>)
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	4798      	blx	r3
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40010400 	.word	0x40010400
 80002f0:	2000002c 	.word	0x2000002c

080002f4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	EXTI->PR |= 1 << 4;
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <EXTI4_IRQHandler+0x1c>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a04      	ldr	r2, [pc, #16]	; (8000310 <EXTI4_IRQHandler+0x1c>)
 80002fe:	f043 0310 	orr.w	r3, r3, #16
 8000302:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <EXTI4_IRQHandler+0x20>)
 8000306:	691b      	ldr	r3, [r3, #16]
 8000308:	4798      	blx	r3
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40010400 	.word	0x40010400
 8000314:	2000002c 	.word	0x2000002c

08000318 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 5) { EXTI->PR |= (1<<5); 	GP_IRQ_CallBack[5](); }
 800031c:	4b26      	ldr	r3, [pc, #152]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	f003 0320 	and.w	r3, r3, #32
 8000324:	2b00      	cmp	r3, #0
 8000326:	d008      	beq.n	800033a <EXTI9_5_IRQHandler+0x22>
 8000328:	4b23      	ldr	r3, [pc, #140]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	4a22      	ldr	r2, [pc, #136]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 800032e:	f043 0320 	orr.w	r3, r3, #32
 8000332:	6153      	str	r3, [r2, #20]
 8000334:	4b21      	ldr	r3, [pc, #132]	; (80003bc <EXTI9_5_IRQHandler+0xa4>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	4798      	blx	r3
	if(EXTI->PR & 1 << 6) { EXTI->PR |= (1<<6); 	GP_IRQ_CallBack[6](); }
 800033a:	4b1f      	ldr	r3, [pc, #124]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000342:	2b00      	cmp	r3, #0
 8000344:	d008      	beq.n	8000358 <EXTI9_5_IRQHandler+0x40>
 8000346:	4b1c      	ldr	r3, [pc, #112]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	4a1b      	ldr	r2, [pc, #108]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 800034c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000350:	6153      	str	r3, [r2, #20]
 8000352:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <EXTI9_5_IRQHandler+0xa4>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	4798      	blx	r3
	if(EXTI->PR & 1 << 7) { EXTI->PR |= (1<<7); 	GP_IRQ_CallBack[7](); }
 8000358:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000360:	2b00      	cmp	r3, #0
 8000362:	d008      	beq.n	8000376 <EXTI9_5_IRQHandler+0x5e>
 8000364:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	4a13      	ldr	r2, [pc, #76]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 800036a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800036e:	6153      	str	r3, [r2, #20]
 8000370:	4b12      	ldr	r3, [pc, #72]	; (80003bc <EXTI9_5_IRQHandler+0xa4>)
 8000372:	69db      	ldr	r3, [r3, #28]
 8000374:	4798      	blx	r3
	if(EXTI->PR & 1 << 8) { EXTI->PR |= (1<<8); 	GP_IRQ_CallBack[8](); }
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800037e:	2b00      	cmp	r3, #0
 8000380:	d008      	beq.n	8000394 <EXTI9_5_IRQHandler+0x7c>
 8000382:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a0c      	ldr	r2, [pc, #48]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 8000388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <EXTI9_5_IRQHandler+0xa4>)
 8000390:	6a1b      	ldr	r3, [r3, #32]
 8000392:	4798      	blx	r3
	if(EXTI->PR & 1 << 9) { EXTI->PR |= (1<<9); 	GP_IRQ_CallBack[9](); }
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800039c:	2b00      	cmp	r3, #0
 800039e:	d008      	beq.n	80003b2 <EXTI9_5_IRQHandler+0x9a>
 80003a0:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 80003a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003aa:	6153      	str	r3, [r2, #20]
 80003ac:	4b03      	ldr	r3, [pc, #12]	; (80003bc <EXTI9_5_IRQHandler+0xa4>)
 80003ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003b0:	4798      	blx	r3

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40010400 	.word	0x40010400
 80003bc:	2000002c 	.word	0x2000002c

080003c0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler()
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 10) { EXTI->PR |= (1<<10); 	GP_IRQ_CallBack[10](); }
 80003c4:	4b2d      	ldr	r3, [pc, #180]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d008      	beq.n	80003e2 <EXTI15_10_IRQHandler+0x22>
 80003d0:	4b2a      	ldr	r3, [pc, #168]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	4a29      	ldr	r2, [pc, #164]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 80003d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003da:	6153      	str	r3, [r2, #20]
 80003dc:	4b28      	ldr	r3, [pc, #160]	; (8000480 <EXTI15_10_IRQHandler+0xc0>)
 80003de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003e0:	4798      	blx	r3
	if(EXTI->PR & 1 << 11) { EXTI->PR |= (1<<11); 	GP_IRQ_CallBack[11](); }
 80003e2:	4b26      	ldr	r3, [pc, #152]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d008      	beq.n	8000400 <EXTI15_10_IRQHandler+0x40>
 80003ee:	4b23      	ldr	r3, [pc, #140]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a22      	ldr	r2, [pc, #136]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 80003f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b21      	ldr	r3, [pc, #132]	; (8000480 <EXTI15_10_IRQHandler+0xc0>)
 80003fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003fe:	4798      	blx	r3
	if(EXTI->PR & 1 << 12) { EXTI->PR |= (1<<12); 	GP_IRQ_CallBack[12](); }
 8000400:	4b1e      	ldr	r3, [pc, #120]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000408:	2b00      	cmp	r3, #0
 800040a:	d008      	beq.n	800041e <EXTI15_10_IRQHandler+0x5e>
 800040c:	4b1b      	ldr	r3, [pc, #108]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	4a1a      	ldr	r2, [pc, #104]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 8000412:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000416:	6153      	str	r3, [r2, #20]
 8000418:	4b19      	ldr	r3, [pc, #100]	; (8000480 <EXTI15_10_IRQHandler+0xc0>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041c:	4798      	blx	r3
	if(EXTI->PR & 1 << 13) { EXTI->PR |= (1<<13); 	GP_IRQ_CallBack[13](); }
 800041e:	4b17      	ldr	r3, [pc, #92]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000426:	2b00      	cmp	r3, #0
 8000428:	d008      	beq.n	800043c <EXTI15_10_IRQHandler+0x7c>
 800042a:	4b14      	ldr	r3, [pc, #80]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	4a13      	ldr	r2, [pc, #76]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 8000430:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000434:	6153      	str	r3, [r2, #20]
 8000436:	4b12      	ldr	r3, [pc, #72]	; (8000480 <EXTI15_10_IRQHandler+0xc0>)
 8000438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800043a:	4798      	blx	r3
	if(EXTI->PR & 1 << 14) { EXTI->PR |= (1<<14); 	GP_IRQ_CallBack[14](); }
 800043c:	4b0f      	ldr	r3, [pc, #60]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000444:	2b00      	cmp	r3, #0
 8000446:	d008      	beq.n	800045a <EXTI15_10_IRQHandler+0x9a>
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	4a0b      	ldr	r2, [pc, #44]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 800044e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000452:	6153      	str	r3, [r2, #20]
 8000454:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <EXTI15_10_IRQHandler+0xc0>)
 8000456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000458:	4798      	blx	r3
	if(EXTI->PR & 1 << 15) { EXTI->PR |= (1<<15); 	GP_IRQ_CallBack[15](); }
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000462:	2b00      	cmp	r3, #0
 8000464:	d008      	beq.n	8000478 <EXTI15_10_IRQHandler+0xb8>
 8000466:	4b05      	ldr	r3, [pc, #20]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a04      	ldr	r2, [pc, #16]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 800046c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	4b03      	ldr	r3, [pc, #12]	; (8000480 <EXTI15_10_IRQHandler+0xc0>)
 8000474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000476:	4798      	blx	r3
}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40010400 	.word	0x40010400
 8000480:	2000002c 	.word	0x2000002c

08000484 <Get_CRLH_Position>:
 *      Author: Antrawy
 */
#include "Stm32F103C6_GPIO_Driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber){
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 800048e:	88fb      	ldrh	r3, [r7, #6]
 8000490:	2b80      	cmp	r3, #128	; 0x80
 8000492:	d042      	beq.n	800051a <Get_CRLH_Position+0x96>
 8000494:	2b80      	cmp	r3, #128	; 0x80
 8000496:	dc11      	bgt.n	80004bc <Get_CRLH_Position+0x38>
 8000498:	2b08      	cmp	r3, #8
 800049a:	d036      	beq.n	800050a <Get_CRLH_Position+0x86>
 800049c:	2b08      	cmp	r3, #8
 800049e:	dc06      	bgt.n	80004ae <Get_CRLH_Position+0x2a>
 80004a0:	2b02      	cmp	r3, #2
 80004a2:	d02e      	beq.n	8000502 <Get_CRLH_Position+0x7e>
 80004a4:	2b04      	cmp	r3, #4
 80004a6:	d02e      	beq.n	8000506 <Get_CRLH_Position+0x82>
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d028      	beq.n	80004fe <Get_CRLH_Position+0x7a>
 80004ac:	e047      	b.n	800053e <Get_CRLH_Position+0xba>
 80004ae:	2b20      	cmp	r3, #32
 80004b0:	d02f      	beq.n	8000512 <Get_CRLH_Position+0x8e>
 80004b2:	2b40      	cmp	r3, #64	; 0x40
 80004b4:	d02f      	beq.n	8000516 <Get_CRLH_Position+0x92>
 80004b6:	2b10      	cmp	r3, #16
 80004b8:	d029      	beq.n	800050e <Get_CRLH_Position+0x8a>
 80004ba:	e040      	b.n	800053e <Get_CRLH_Position+0xba>
 80004bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004c0:	d033      	beq.n	800052a <Get_CRLH_Position+0xa6>
 80004c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004c6:	dc09      	bgt.n	80004dc <Get_CRLH_Position+0x58>
 80004c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004cc:	d029      	beq.n	8000522 <Get_CRLH_Position+0x9e>
 80004ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004d2:	d028      	beq.n	8000526 <Get_CRLH_Position+0xa2>
 80004d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004d8:	d021      	beq.n	800051e <Get_CRLH_Position+0x9a>
 80004da:	e030      	b.n	800053e <Get_CRLH_Position+0xba>
 80004dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004e0:	d027      	beq.n	8000532 <Get_CRLH_Position+0xae>
 80004e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004e6:	dc03      	bgt.n	80004f0 <Get_CRLH_Position+0x6c>
 80004e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80004ec:	d01f      	beq.n	800052e <Get_CRLH_Position+0xaa>
 80004ee:	e026      	b.n	800053e <Get_CRLH_Position+0xba>
 80004f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80004f4:	d01f      	beq.n	8000536 <Get_CRLH_Position+0xb2>
 80004f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80004fa:	d01e      	beq.n	800053a <Get_CRLH_Position+0xb6>
 80004fc:	e01f      	b.n	800053e <Get_CRLH_Position+0xba>
	case GPIO_PIN_0:
		return 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	e01e      	b.n	8000540 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000502:	2304      	movs	r3, #4
 8000504:	e01c      	b.n	8000540 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000506:	2308      	movs	r3, #8
 8000508:	e01a      	b.n	8000540 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 800050a:	230c      	movs	r3, #12
 800050c:	e018      	b.n	8000540 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 800050e:	2310      	movs	r3, #16
 8000510:	e016      	b.n	8000540 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000512:	2314      	movs	r3, #20
 8000514:	e014      	b.n	8000540 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000516:	2318      	movs	r3, #24
 8000518:	e012      	b.n	8000540 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 800051a:	231c      	movs	r3, #28
 800051c:	e010      	b.n	8000540 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 800051e:	2300      	movs	r3, #0
 8000520:	e00e      	b.n	8000540 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 8000522:	2304      	movs	r3, #4
 8000524:	e00c      	b.n	8000540 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000526:	2308      	movs	r3, #8
 8000528:	e00a      	b.n	8000540 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 800052a:	230c      	movs	r3, #12
 800052c:	e008      	b.n	8000540 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 800052e:	2310      	movs	r3, #16
 8000530:	e006      	b.n	8000540 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000532:	2314      	movs	r3, #20
 8000534:	e004      	b.n	8000540 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000536:	2318      	movs	r3, #24
 8000538:	e002      	b.n	8000540 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 800053a:	231c      	movs	r3, #28
 800053c:	e000      	b.n	8000540 <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 800053e:	2300      	movs	r3, #0
}
 8000540:	4618      	mov	r0, r3
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr

0800054a <MCAL_GPIO_Init>:
* @retval 			-None
* Note				-Stm32F103C6 MCU has GPIO A, B, C, D, E Modules
* 					But LQFP48 Package jas only GPIO A, B, PART of C/D exported as external PINs from the Module
*/

void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig){
 800054a:	b590      	push	{r4, r7, lr}
 800054c:	b085      	sub	sp, #20
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
 8000552:	6039      	str	r1, [r7, #0]
	//Port configuration low (GPIO_CRL) Configure PINS from 0 >> 7
	//Port configuration high (GPIO_CRH) Configure PINS from 8 >> 15
	volatile uint32_t *configRegister = NULL;
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	73fb      	strb	r3, [r7, #15]

	configRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH;
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	2bff      	cmp	r3, #255	; 0xff
 8000562:	d801      	bhi.n	8000568 <MCAL_GPIO_Init+0x1e>
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	e001      	b.n	800056c <MCAL_GPIO_Init+0x22>
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	3304      	adds	r3, #4
 800056c:	60bb      	str	r3, [r7, #8]

	//Clear CNF[1:0] MODE[1:0]
	(*configRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ff86 	bl	8000484 <Get_CRLH_Position>
 8000578:	4603      	mov	r3, r0
 800057a:	461a      	mov	r2, r3
 800057c:	230f      	movs	r3, #15
 800057e:	4093      	lsls	r3, r2
 8000580:	43da      	mvns	r2, r3
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	401a      	ands	r2, r3
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	601a      	str	r2, [r3, #0]

	//If Pin is output
	if ((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)){
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	789b      	ldrb	r3, [r3, #2]
 8000590:	2b07      	cmp	r3, #7
 8000592:	d00b      	beq.n	80005ac <MCAL_GPIO_Init+0x62>
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	789b      	ldrb	r3, [r3, #2]
 8000598:	2b06      	cmp	r3, #6
 800059a:	d007      	beq.n	80005ac <MCAL_GPIO_Init+0x62>
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	789b      	ldrb	r3, [r3, #2]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d003      	beq.n	80005ac <MCAL_GPIO_Init+0x62>
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	789b      	ldrb	r3, [r3, #2]
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	d10e      	bne.n	80005ca <MCAL_GPIO_Init+0x80>
		//Set CNF[1:0] MODE[1:0]
		PIN_Config = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F);
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	789b      	ldrb	r3, [r3, #2]
 80005b0:	3b04      	subs	r3, #4
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	b25a      	sxtb	r2, r3
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	78db      	ldrb	r3, [r3, #3]
 80005ba:	b25b      	sxtb	r3, r3
 80005bc:	4313      	orrs	r3, r2
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	f003 030f 	and.w	r3, r3, #15
 80005c6:	73fb      	strb	r3, [r7, #15]
 80005c8:	e02c      	b.n	8000624 <MCAL_GPIO_Init+0xda>
	}
	//If Pin is input
	else{
		if ((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG)){
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	789b      	ldrb	r3, [r3, #2]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d003      	beq.n	80005da <MCAL_GPIO_Init+0x90>
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	789b      	ldrb	r3, [r3, #2]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d107      	bne.n	80005ea <MCAL_GPIO_Init+0xa0>
			PIN_Config = ( ( (PinConfig->GPIO_MODE << 2) | 0x0 ) & 0x0F);
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	789b      	ldrb	r3, [r3, #2]
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	f003 030f 	and.w	r3, r3, #15
 80005e6:	73fb      	strb	r3, [r7, #15]
 80005e8:	e01c      	b.n	8000624 <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT){
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	789b      	ldrb	r3, [r3, #2]
 80005ee:	2b08      	cmp	r3, #8
 80005f0:	d102      	bne.n	80005f8 <MCAL_GPIO_Init+0xae>
			PIN_Config = ( ( (GPIO_MODE_INPUT_FLO << 2) | 0x0 ) & 0x0F);
 80005f2:	2304      	movs	r3, #4
 80005f4:	73fb      	strb	r3, [r7, #15]
 80005f6:	e015      	b.n	8000624 <MCAL_GPIO_Init+0xda>
		}
		//PU or PD input
		else{
			PIN_Config = ( ( (GPIO_MODE_INPUT_PU << 2) | 0x0 ) & 0x0F);
 80005f8:	2308      	movs	r3, #8
 80005fa:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU){
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	789b      	ldrb	r3, [r3, #2]
 8000600:	2b02      	cmp	r3, #2
 8000602:	d107      	bne.n	8000614 <MCAL_GPIO_Init+0xca>
				//Table 20, Port bit configuration table PxODR 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	8812      	ldrh	r2, [r2, #0]
 800060c:	431a      	orrs	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	e007      	b.n	8000624 <MCAL_GPIO_Init+0xda>
			}else{
				//Table 20, Port bit configuration table PxODR 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	8812      	ldrh	r2, [r2, #0]
 800061c:	43d2      	mvns	r2, r2
 800061e:	401a      	ands	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*configRegister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000624:	7bfc      	ldrb	r4, [r7, #15]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ff2a 	bl	8000484 <Get_CRLH_Position>
 8000630:	4603      	mov	r3, r0
 8000632:	fa04 f203 	lsl.w	r2, r4, r3
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	431a      	orrs	r2, r3
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	601a      	str	r2, [r3, #0]

}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	bd90      	pop	{r4, r7, pc}

08000648 <MCAL_RCC_GetSYS_CLKFreq>:
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512
const uint8_t AHBPressTable[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

uint32_t MCAL_RCC_GetSYS_CLKFreq(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable
	switch ((RCC->CFGR >> 2) & 0b11)
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MCAL_RCC_GetSYS_CLKFreq+0x30>)
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	089b      	lsrs	r3, r3, #2
 8000652:	f003 0303 	and.w	r3, r3, #3
 8000656:	2b01      	cmp	r3, #1
 8000658:	d006      	beq.n	8000668 <MCAL_RCC_GetSYS_CLKFreq+0x20>
 800065a:	2b01      	cmp	r3, #1
 800065c:	d302      	bcc.n	8000664 <MCAL_RCC_GetSYS_CLKFreq+0x1c>
 800065e:	2b02      	cmp	r3, #2
 8000660:	d004      	beq.n	800066c <MCAL_RCC_GetSYS_CLKFreq+0x24>
 8000662:	e005      	b.n	8000670 <MCAL_RCC_GetSYS_CLKFreq+0x28>
	{
	case 0:
		return HSI_RC_Clk;
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <MCAL_RCC_GetSYS_CLKFreq+0x34>)
 8000666:	e003      	b.n	8000670 <MCAL_RCC_GetSYS_CLKFreq+0x28>
		break;

	case 1:
		return HSE_Clock;
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 800066a:	e001      	b.n	8000670 <MCAL_RCC_GetSYS_CLKFreq+0x28>
		break;

	case 2:
		return 16000000;
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 800066e:	e7ff      	b.n	8000670 <MCAL_RCC_GetSYS_CLKFreq+0x28>
		break;
	}
}
 8000670:	4618      	mov	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	40021000 	.word	0x40021000
 800067c:	007a1200 	.word	0x007a1200
 8000680:	00f42400 	.word	0x00f42400

08000684 <MCAL_RCC_GetPCLK1Freq>:
{
//	Bits 7:4 HPRE: AHB prescaler
	return (MCAL_RCC_GetSYS_CLKFreq() >> AHBPressTable[((RCC->CFGR >> 4) & 0xF)]);
}
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_GetSYS_CLKFreq() >> APBPressTable[((RCC->CFGR >> 8) & 0b111)]);
 8000688:	f7ff ffde 	bl	8000648 <MCAL_RCC_GetSYS_CLKFreq>
 800068c:	4601      	mov	r1, r0
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	0a1b      	lsrs	r3, r3, #8
 8000694:	f003 0307 	and.w	r3, r3, #7
 8000698:	4a03      	ldr	r2, [pc, #12]	; (80006a8 <MCAL_RCC_GetPCLK1Freq+0x24>)
 800069a:	5cd3      	ldrb	r3, [r2, r3]
 800069c:	fa21 f303 	lsr.w	r3, r1, r3

}
 80006a0:	4618      	mov	r0, r3
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40021000 	.word	0x40021000
 80006a8:	08000adc 	.word	0x08000adc

080006ac <MCAL_RCC_GetPCLK2Freq>:
uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2: APB low-speed prescaler (APB2)
	return (MCAL_RCC_GetSYS_CLKFreq() >> APBPressTable[((RCC->CFGR >> 11) & 0b111)]);
 80006b0:	f7ff ffca 	bl	8000648 <MCAL_RCC_GetSYS_CLKFreq>
 80006b4:	4601      	mov	r1, r0
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <MCAL_RCC_GetPCLK2Freq+0x20>)
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	0adb      	lsrs	r3, r3, #11
 80006bc:	f003 0307 	and.w	r3, r3, #7
 80006c0:	4a03      	ldr	r2, [pc, #12]	; (80006d0 <MCAL_RCC_GetPCLK2Freq+0x24>)
 80006c2:	5cd3      	ldrb	r3, [r2, r3]
 80006c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000
 80006d0:	08000adc 	.word	0x08000adc

080006d4 <MCAL_UART_Init>:
* Note				-Support for Now Asynch. mode & clock 8 MHZ
*/


void MCAL_UART_Init (USART_TypeDef* USARTx, UART_Config* UART_Config)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]

	uint32_t pclk, BRR;

	// enable the clock for given USART peripheral
	if		(USARTx == USART1) 		{	RCC_UASRT1_CLK_EN(); 	Global_UART_Config[0] = UART_Config;	}
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4a59      	ldr	r2, [pc, #356]	; (8000848 <MCAL_UART_Init+0x174>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d109      	bne.n	80006fa <MCAL_UART_Init+0x26>
 80006e6:	4b59      	ldr	r3, [pc, #356]	; (800084c <MCAL_UART_Init+0x178>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	4a58      	ldr	r2, [pc, #352]	; (800084c <MCAL_UART_Init+0x178>)
 80006ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f0:	6193      	str	r3, [r2, #24]
 80006f2:	4a57      	ldr	r2, [pc, #348]	; (8000850 <MCAL_UART_Init+0x17c>)
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	e01a      	b.n	8000730 <MCAL_UART_Init+0x5c>
	else if	(USARTx == USART2) 		{	RCC_UASRT2_CLK_EN();	Global_UART_Config[1] = UART_Config;	}
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a55      	ldr	r2, [pc, #340]	; (8000854 <MCAL_UART_Init+0x180>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d109      	bne.n	8000716 <MCAL_UART_Init+0x42>
 8000702:	4b52      	ldr	r3, [pc, #328]	; (800084c <MCAL_UART_Init+0x178>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a51      	ldr	r2, [pc, #324]	; (800084c <MCAL_UART_Init+0x178>)
 8000708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800070c:	61d3      	str	r3, [r2, #28]
 800070e:	4a50      	ldr	r2, [pc, #320]	; (8000850 <MCAL_UART_Init+0x17c>)
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	6053      	str	r3, [r2, #4]
 8000714:	e00c      	b.n	8000730 <MCAL_UART_Init+0x5c>
	else if	(USARTx == USART3) 		{	RCC_UASRT3_CLK_EN();	Global_UART_Config[2] = UART_Config;	}
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a4f      	ldr	r2, [pc, #316]	; (8000858 <MCAL_UART_Init+0x184>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d108      	bne.n	8000730 <MCAL_UART_Init+0x5c>
 800071e:	4b4b      	ldr	r3, [pc, #300]	; (800084c <MCAL_UART_Init+0x178>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	4a4a      	ldr	r2, [pc, #296]	; (800084c <MCAL_UART_Init+0x178>)
 8000724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000728:	61d3      	str	r3, [r2, #28]
 800072a:	4a49      	ldr	r2, [pc, #292]	; (8000850 <MCAL_UART_Init+0x17c>)
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	6093      	str	r3, [r2, #8]

	//Enable USART Module
	//Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	60da      	str	r2, [r3, #12]

	//Enable USART TX & RX according to the UART_Config mode
	//USARTx CR1 Bit 3 TE: Transmitter enable & Bit 3 TE: Transmitter enable
	USARTx->CR1 |= UART_Config->USART_Mode;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	431a      	orrs	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	60da      	str	r2, [r3, #12]

	//Payload Length
	//USARTx CR1 Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->Payload_length;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	68db      	ldr	r3, [r3, #12]
 800074e:	683a      	ldr	r2, [r7, #0]
 8000750:	7a12      	ldrb	r2, [r2, #8]
 8000752:	431a      	orrs	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	60da      	str	r2, [r3, #12]

	//Parity
	//USARTx CR1 Bit 12 M: Word length & Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	683a      	ldr	r2, [r7, #0]
 800075e:	7a52      	ldrb	r2, [r2, #9]
 8000760:	431a      	orrs	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	60da      	str	r2, [r3, #12]

	//STOP bits
	//USARTx CR2 Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_Config->StopBits;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	691b      	ldr	r3, [r3, #16]
 800076a:	683a      	ldr	r2, [r7, #0]
 800076c:	7a92      	ldrb	r2, [r2, #10]
 800076e:	431a      	orrs	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	611a      	str	r2, [r3, #16]

	//USART hardware Flow Control
	//USARTx CR3 Bit 9 CTSE: CTS enable & Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HwFlowCtl;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	683a      	ldr	r2, [r7, #0]
 800077a:	7ad2      	ldrb	r2, [r2, #11]
 800077c:	431a      	orrs	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	615a      	str	r2, [r3, #20]

	//Configuration of BRR(BaudRate register)
	//PCLK1 for USART2,3
	//PCLK2 for USART1
	if (USARTx == USART1)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a30      	ldr	r2, [pc, #192]	; (8000848 <MCAL_UART_Init+0x174>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d103      	bne.n	8000792 <MCAL_UART_Init+0xbe>
	{
		pclk = MCAL_RCC_GetPCLK2Freq();
 800078a:	f7ff ff8f 	bl	80006ac <MCAL_RCC_GetPCLK2Freq>
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	e002      	b.n	8000798 <MCAL_UART_Init+0xc4>
	}
	else
	{
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000792:	f7ff ff77 	bl	8000684 <MCAL_RCC_GetPCLK1Freq>
 8000796:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BoudRate);
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	011b      	lsls	r3, r3, #4
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a4:	0119      	lsls	r1, r3, #4
 80007a6:	68fa      	ldr	r2, [r7, #12]
 80007a8:	4613      	mov	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	009a      	lsls	r2, r3, #2
 80007b0:	441a      	add	r2, r3
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	011b      	lsls	r3, r3, #4
 80007c2:	68f8      	ldr	r0, [r7, #12]
 80007c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80007c8:	2064      	movs	r0, #100	; 0x64
 80007ca:	fb00 f303 	mul.w	r3, r0, r3
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	011b      	lsls	r3, r3, #4
 80007d2:	4a22      	ldr	r2, [pc, #136]	; (800085c <MCAL_UART_Init+0x188>)
 80007d4:	fba2 2303 	umull	r2, r3, r2, r3
 80007d8:	095b      	lsrs	r3, r3, #5
 80007da:	f003 030f 	and.w	r3, r3, #15
 80007de:	430b      	orrs	r3, r1
 80007e0:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	68ba      	ldr	r2, [r7, #8]
 80007e6:	609a      	str	r2, [r3, #8]

	//Enable / Disable Interrupt
	//USART_CR1
	if (UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	7b1b      	ldrb	r3, [r3, #12]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d026      	beq.n	800083e <MCAL_UART_Init+0x16a>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	683a      	ldr	r2, [r7, #0]
 80007f6:	7b12      	ldrb	r2, [r2, #12]
 80007f8:	431a      	orrs	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	60da      	str	r2, [r3, #12]

		//Enable NVIC for USARTx IRQ
		if 		(USARTx == USART1) 		NVIC_IRQ37_USART1_Enable;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a11      	ldr	r2, [pc, #68]	; (8000848 <MCAL_UART_Init+0x174>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d106      	bne.n	8000814 <MCAL_UART_Init+0x140>
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MCAL_UART_Init+0x18c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a15      	ldr	r2, [pc, #84]	; (8000860 <MCAL_UART_Init+0x18c>)
 800080c:	f043 0320 	orr.w	r3, r3, #32
 8000810:	6013      	str	r3, [r2, #0]
		else if (USARTx == USART2)		NVIC_IRQ38_USART2_Enable;
		else if (USARTx == USART3) 		NVIC_IRQ39_USART3_Enable;
	}
}
 8000812:	e014      	b.n	800083e <MCAL_UART_Init+0x16a>
		else if (USARTx == USART2)		NVIC_IRQ38_USART2_Enable;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <MCAL_UART_Init+0x180>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d106      	bne.n	800082a <MCAL_UART_Init+0x156>
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MCAL_UART_Init+0x18c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0f      	ldr	r2, [pc, #60]	; (8000860 <MCAL_UART_Init+0x18c>)
 8000822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000826:	6013      	str	r3, [r2, #0]
}
 8000828:	e009      	b.n	800083e <MCAL_UART_Init+0x16a>
		else if (USARTx == USART3) 		NVIC_IRQ39_USART3_Enable;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <MCAL_UART_Init+0x184>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d105      	bne.n	800083e <MCAL_UART_Init+0x16a>
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MCAL_UART_Init+0x18c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <MCAL_UART_Init+0x18c>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800083c:	6013      	str	r3, [r2, #0]
}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40013800 	.word	0x40013800
 800084c:	40021000 	.word	0x40021000
 8000850:	2000001c 	.word	0x2000001c
 8000854:	40004400 	.word	0x40004400
 8000858:	40004800 	.word	0x40004800
 800085c:	51eb851f 	.word	0x51eb851f
 8000860:	e000e104 	.word	0xe000e104

08000864 <MCAL_UART_SendData>:
* 					the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
* 					because it is replaced by the parity.
* 					When receiving with the parity enabled, the value read in the MSB bit is the received parity bit
*/
void MCAL_UART_SendData (USART_TypeDef* USARTx, uint16_t* pTxBuffer, enum Polling_mechanism PollingEn)
{
 8000864:	b480      	push	{r7}
 8000866:	b087      	sub	sp, #28
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	4613      	mov	r3, r2
 8000870:	71fb      	strb	r3, [r7, #7]
	UART_Config* UART_Config = NULL;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
	if		(USARTx == USART1) 		UART_Config = Global_UART_Config[0];
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	4a14      	ldr	r2, [pc, #80]	; (80008cc <MCAL_UART_SendData+0x68>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d103      	bne.n	8000886 <MCAL_UART_SendData+0x22>
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MCAL_UART_SendData+0x6c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	e00e      	b.n	80008a4 <MCAL_UART_SendData+0x40>
	else if	(USARTx == USART2) 		UART_Config = Global_UART_Config[1];
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <MCAL_UART_SendData+0x70>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d103      	bne.n	8000896 <MCAL_UART_SendData+0x32>
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MCAL_UART_SendData+0x6c>)
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	e006      	b.n	80008a4 <MCAL_UART_SendData+0x40>
	else if	(USARTx == USART3) 		UART_Config = Global_UART_Config[2];
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <MCAL_UART_SendData+0x74>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d102      	bne.n	80008a4 <MCAL_UART_SendData+0x40>
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MCAL_UART_SendData+0x6c>)
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	617b      	str	r3, [r7, #20]

	// Wait until TXE flag is set in the SR
	if(PollingEn == enable)	while ( !(USARTx->SR & 1<<7) );
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d106      	bne.n	80008b8 <MCAL_UART_SendData+0x54>
 80008aa:	bf00      	nop
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d0f9      	beq.n	80008ac <MCAL_UART_SendData+0x48>
	if(UART_Config->Payload_length == UART_Payload_Length_9B)
	{
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
	}else
	{
		USARTx->DR = (*pTxBuffer & (uint16_t)0xFF);
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	605a      	str	r2, [r3, #4]
	}
}
 80008c2:	bf00      	nop
 80008c4:	371c      	adds	r7, #28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	40013800 	.word	0x40013800
 80008d0:	2000001c 	.word	0x2000001c
 80008d4:	40004400 	.word	0x40004400
 80008d8:	40004800 	.word	0x40004800

080008dc <MCAL_UART_ReceiveData>:
* @param [in] 		-PollingEn Enable/Disable polling
* @retval 			-None
* Note				-None
*/
void MCAL_UART_ReceiveData (USART_TypeDef* USARTx, uint16_t* pTxBuffer, enum Polling_mechanism PollingEn)
{
 80008dc:	b480      	push	{r7}
 80008de:	b087      	sub	sp, #28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	4613      	mov	r3, r2
 80008e8:	71fb      	strb	r3, [r7, #7]
	UART_Config* UART_Config = NULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
	if		(USARTx == USART1) 		UART_Config = Global_UART_Config[0];
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	4a1c      	ldr	r2, [pc, #112]	; (8000964 <MCAL_UART_ReceiveData+0x88>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d103      	bne.n	80008fe <MCAL_UART_ReceiveData+0x22>
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MCAL_UART_ReceiveData+0x8c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	e00e      	b.n	800091c <MCAL_UART_ReceiveData+0x40>
	else if	(USARTx == USART2) 		UART_Config = Global_UART_Config[1];
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	4a1a      	ldr	r2, [pc, #104]	; (800096c <MCAL_UART_ReceiveData+0x90>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d103      	bne.n	800090e <MCAL_UART_ReceiveData+0x32>
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MCAL_UART_ReceiveData+0x8c>)
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	e006      	b.n	800091c <MCAL_UART_ReceiveData+0x40>
	else if	(USARTx == USART3) 		UART_Config = Global_UART_Config[2];
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	4a17      	ldr	r2, [pc, #92]	; (8000970 <MCAL_UART_ReceiveData+0x94>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d102      	bne.n	800091c <MCAL_UART_ReceiveData+0x40>
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MCAL_UART_ReceiveData+0x8c>)
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	617b      	str	r3, [r7, #20]
	//Wait until RXNE flag is set in the SR
	if(PollingEn == enable)	while ( !(USARTx->SR & 1<<5) );
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d106      	bne.n	8000930 <MCAL_UART_ReceiveData+0x54>
 8000922:	bf00      	nop
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f003 0320 	and.w	r3, r3, #32
 800092c:	2b00      	cmp	r3, #0
 800092e:	d0f9      	beq.n	8000924 <MCAL_UART_ReceiveData+0x48>
			//Parity is used, so 8BITs will be of user data and 1 bit is for parity
			*((uint16_t*) pTxBuffer) = (USARTx->DR & (uint8_t)0xFF);
		}
	}else
	{
		if(UART_Config->Parity == UART_Parity__NONE)
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	7a5b      	ldrb	r3, [r3, #9]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d107      	bne.n	8000948 <MCAL_UART_ReceiveData+0x6c>
		{
			//No parity -> All 8BITs are considered data
			*((uint16_t*) pTxBuffer) = (USARTx->DR & (uint8_t)0xFF);
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	b29b      	uxth	r3, r3
 800093e:	b2db      	uxtb	r3, r3
 8000940:	b29a      	uxth	r2, r3
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	801a      	strh	r2, [r3, #0]
			//Parity is used, so 7BITs will be of user data and 1 bit is for parity
			*((uint16_t*) pTxBuffer) = (USARTx->DR & (uint8_t)0x7F);
		}
	}

}
 8000946:	e007      	b.n	8000958 <MCAL_UART_ReceiveData+0x7c>
			*((uint16_t*) pTxBuffer) = (USARTx->DR & (uint8_t)0x7F);
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	b29b      	uxth	r3, r3
 800094e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000952:	b29a      	uxth	r2, r3
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	801a      	strh	r2, [r3, #0]
}
 8000958:	bf00      	nop
 800095a:	371c      	adds	r7, #28
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40013800 	.word	0x40013800
 8000968:	2000001c 	.word	0x2000001c
 800096c:	40004400 	.word	0x40004400
 8000970:	40004800 	.word	0x40004800

08000974 <MCAL_UART_GPIO_Set_Pins>:
* @param [in] 		-USARTx: where x can be (1..3 depending on device used)
* @retval 			-None
* Note				-Should enable the corresponding ALT & GPIO in RCC clock Also called after MCAL_UART_Init()
*/
void MCAL_UART_GPIO_Set_Pins (USART_TypeDef* USARTx)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinConfig;
	if (USARTx == USART1)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a2b      	ldr	r2, [pc, #172]	; (8000a2c <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d118      	bne.n	80009b6 <MCAL_UART_GPIO_Set_Pins+0x42>
	{
		//PA9 TX
		PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 8000984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000988:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800098a:	2306      	movs	r3, #6
 800098c:	73bb      	strb	r3, [r7, #14]
		PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 800098e:	2301      	movs	r3, #1
 8000990:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	4619      	mov	r1, r3
 8000998:	4825      	ldr	r0, [pc, #148]	; (8000a30 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 800099a:	f7ff fdd6 	bl	800054a <MCAL_GPIO_Init>

		//PA10 Rx
		PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 800099e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a2:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80009a4:	2308      	movs	r3, #8
 80009a6:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinConfig);
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4619      	mov	r1, r3
 80009ae:	4820      	ldr	r0, [pc, #128]	; (8000a30 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80009b0:	f7ff fdcb 	bl	800054a <MCAL_GPIO_Init>
			PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &PinConfig);
		}
	}

}
 80009b4:	e036      	b.n	8000a24 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if (USARTx == USART2)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a1e      	ldr	r2, [pc, #120]	; (8000a34 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d116      	bne.n	80009ec <MCAL_UART_GPIO_Set_Pins+0x78>
		PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 80009be:	2304      	movs	r3, #4
 80009c0:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80009c2:	2306      	movs	r3, #6
 80009c4:	73bb      	strb	r3, [r7, #14]
		PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009c6:	2301      	movs	r3, #1
 80009c8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinConfig);
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	4619      	mov	r1, r3
 80009d0:	4817      	ldr	r0, [pc, #92]	; (8000a30 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80009d2:	f7ff fdba 	bl	800054a <MCAL_GPIO_Init>
		PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 80009d6:	2308      	movs	r3, #8
 80009d8:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80009da:	2308      	movs	r3, #8
 80009dc:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinConfig);
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	4619      	mov	r1, r3
 80009e4:	4812      	ldr	r0, [pc, #72]	; (8000a30 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80009e6:	f7ff fdb0 	bl	800054a <MCAL_GPIO_Init>
}
 80009ea:	e01b      	b.n	8000a24 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if (USARTx == USART3)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d117      	bne.n	8000a24 <MCAL_UART_GPIO_Set_Pins+0xb0>
		PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 80009f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f8:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80009fa:	2306      	movs	r3, #6
 80009fc:	73bb      	strb	r3, [r7, #14]
		PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009fe:	2301      	movs	r3, #1
 8000a00:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	4619      	mov	r1, r3
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000a0a:	f7ff fd9e 	bl	800054a <MCAL_GPIO_Init>
		PinConfig.GPIO_PinNumber = GPIO_PIN_11;
 8000a0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a12:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000a14:	2308      	movs	r3, #8
 8000a16:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4807      	ldr	r0, [pc, #28]	; (8000a3c <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000a20:	f7ff fd93 	bl	800054a <MCAL_GPIO_Init>
}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40013800 	.word	0x40013800
 8000a30:	40010800 	.word	0x40010800
 8000a34:	40004400 	.word	0x40004400
 8000a38:	40004800 	.word	0x40004800
 8000a3c:	40010c00 	.word	0x40010c00

08000a40 <USART1_IRQHandler>:


//ISR

void USART1_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	Global_UART_Config[0]->P_IRQ_CallBack();
 8000a44:	4b02      	ldr	r3, [pc, #8]	; (8000a50 <USART1_IRQHandler+0x10>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	691b      	ldr	r3, [r3, #16]
 8000a4a:	4798      	blx	r3
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000001c 	.word	0x2000001c

08000a54 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	Global_UART_Config[1]->P_IRQ_CallBack();
 8000a58:	4b02      	ldr	r3, [pc, #8]	; (8000a64 <USART2_IRQHandler+0x10>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	691b      	ldr	r3, [r3, #16]
 8000a5e:	4798      	blx	r3
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	2000001c 	.word	0x2000001c

08000a68 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	Global_UART_Config[2]->P_IRQ_CallBack();
 8000a6c:	4b02      	ldr	r3, [pc, #8]	; (8000a78 <USART3_IRQHandler+0x10>)
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	691b      	ldr	r3, [r3, #16]
 8000a72:	4798      	blx	r3
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2000001c 	.word	0x2000001c

08000a7c <__libc_init_array>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	2500      	movs	r5, #0
 8000a80:	4e0c      	ldr	r6, [pc, #48]	; (8000ab4 <__libc_init_array+0x38>)
 8000a82:	4c0d      	ldr	r4, [pc, #52]	; (8000ab8 <__libc_init_array+0x3c>)
 8000a84:	1ba4      	subs	r4, r4, r6
 8000a86:	10a4      	asrs	r4, r4, #2
 8000a88:	42a5      	cmp	r5, r4
 8000a8a:	d109      	bne.n	8000aa0 <__libc_init_array+0x24>
 8000a8c:	f000 f81a 	bl	8000ac4 <_init>
 8000a90:	2500      	movs	r5, #0
 8000a92:	4e0a      	ldr	r6, [pc, #40]	; (8000abc <__libc_init_array+0x40>)
 8000a94:	4c0a      	ldr	r4, [pc, #40]	; (8000ac0 <__libc_init_array+0x44>)
 8000a96:	1ba4      	subs	r4, r4, r6
 8000a98:	10a4      	asrs	r4, r4, #2
 8000a9a:	42a5      	cmp	r5, r4
 8000a9c:	d105      	bne.n	8000aaa <__libc_init_array+0x2e>
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}
 8000aa0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000aa4:	4798      	blx	r3
 8000aa6:	3501      	adds	r5, #1
 8000aa8:	e7ee      	b.n	8000a88 <__libc_init_array+0xc>
 8000aaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000aae:	4798      	blx	r3
 8000ab0:	3501      	adds	r5, #1
 8000ab2:	e7f2      	b.n	8000a9a <__libc_init_array+0x1e>
 8000ab4:	08000ae4 	.word	0x08000ae4
 8000ab8:	08000ae4 	.word	0x08000ae4
 8000abc:	08000ae4 	.word	0x08000ae4
 8000ac0:	08000ae8 	.word	0x08000ae8

08000ac4 <_init>:
 8000ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ac6:	bf00      	nop
 8000ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aca:	bc08      	pop	{r3}
 8000acc:	469e      	mov	lr, r3
 8000ace:	4770      	bx	lr

08000ad0 <_fini>:
 8000ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad2:	bf00      	nop
 8000ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ad6:	bc08      	pop	{r3}
 8000ad8:	469e      	mov	lr, r3
 8000ada:	4770      	bx	lr
